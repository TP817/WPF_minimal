<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" po:Freeze="True" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:helpers="clr-namespace:WPFDevelopers.Minimal.Helpers" xmlns:wpfdev="clr-namespace:WPFDevelopers.Minimal.Net45x" xmlns:converts="clr-namespace:WPFDevelopers.Minimal.Converts" xmlns:controls="clr-namespace:WPFDevelopers.Minimal.Controls">
	<Color x:Key="SecondaryTextColor" po:Freeze="True">#909399</Color>
	<Color x:Key="PlaceholderTextColor" po:Freeze="True">#C0C4CC</Color>
	<Color x:Key="NormalColor" po:Freeze="True">#409EFF</Color>
	<Color x:Key="SuccessColor" po:Freeze="True">#67C23A</Color>
	<Color x:Key="SuccessMouseOverColor" po:Freeze="True">#85CE61</Color>
	<Color x:Key="SuccessPressedColor" po:Freeze="True">#5DAF34</Color>
	<Color x:Key="WarningColor" po:Freeze="True">#E6A23C</Color>
	<Color x:Key="WarningMouseOverColor" po:Freeze="True">#EBB563</Color>
	<Color x:Key="WarningPressedColor" po:Freeze="True">#CF9236</Color>
	<Color x:Key="DangerColor" po:Freeze="True">#F56C6C</Color>
	<Color x:Key="DangerMouseOverColor" po:Freeze="True">#F78989</Color>
	<Color x:Key="DangerPressedColor" po:Freeze="True">#DD6161</Color>
	<Color x:Key="InfoColor" po:Freeze="True">#909399</Color>
	<Color x:Key="InfoMouseOverColor" po:Freeze="True">#A6A9AD</Color>
	<Color x:Key="InfoPressedColor" po:Freeze="True">#82848A</Color>
	<Color x:Key="ExtralightColor" po:Freeze="True">#F2F6FC</Color>
	<Color x:Key="BlackColor" po:Freeze="True">#000000</Color>
	<Color x:Key="CircularSingularColor" po:Freeze="True">#BAE766</Color>
	<Color x:Key="CircularDualColor" po:Freeze="True">#B0D440</Color>
	<sys:Double x:Key="NormalFontSize">14</sys:Double>
	<sys:Double x:Key="MediumFontSize">15</sys:Double>
	<sys:Double x:Key="TitleFontSize">18</sys:Double>
	<FontFamily x:Key="NormalFontFamily">
        Helvetica Neue For Number, 
        -apple-system, 
        BlinkMacSystemFont, 
        Segoe UI,
        Roboto, 
        PingFang SC, 
        Hiragino Sans GB, 
        Microsoft YaHei, 
        Helvetica Neue, 
        Helvetica, Arial, 
        sans-serif
    </FontFamily>
	<FontStretch x:Key="NormalFontStretch">Normal</FontStretch>
	<FontStyle x:Key="NormalFontStyle">Normal</FontStyle>
	<FontWeight x:Key="NormalFontWeight">Normal</FontWeight>
	<Geometry x:Key="PathCheckMark" po:Freeze="True">M384 690l452-452 60 60-512 512-238-238 60-60z</Geometry>
	<Geometry x:Key="PathComboBoxToggleButton" po:Freeze="True">M998 352c0 -8 -4 -17 -10 -23l-50 -50c-6 -6 -14 -10 -23 -10c-8 0 -17 4 -23 10l-393 393l-393 -393c-6 -6 -15 -10 -23 -10s-17 4 -23 10l-50 50c-6 6 -10 15 -10 23s4 17 10 23l466 466c6 6 15 10 23 10s17 -4 23 -10l466 -466c6 -6 10 -15 10 -23z</Geometry>
	<Geometry x:Key="PathBlackout" po:Freeze="True">M8.1772461,11.029181 L10.433105,
                  11.029181 L11.700684,12.801641 L12.973633,
                  11.029181 L15.191895,11.029181 L12.844727,
                  13.999395 L15.21875,17.060919 L12.962891,
                  17.060919 L11.673828,15.256231 L10.352539,
                  17.060919 L8.1396484,17.060919 L10.519043,
                  14.042364 z</Geometry>
	<Geometry x:Key="PathPrevious" po:Freeze="True">M658 316l-196 196 196 196-60 60-256-256 256-256z</Geometry>
	<Geometry x:Key="PathNext" po:Freeze="True">M426 256l256 256-256 256-60-60 196-196-196-196z</Geometry>
	<Geometry x:Key="PathDatePickerDropDown" po:Freeze="True">M11.426758,8.4305077 L11.749023,8.4305077 
                    L11.749023,16.331387 L10.674805,16.331387 
                    L10.674805,10.299648 L9.0742188,11.298672
                    L9.0742188,10.294277 C9.4788408,10.090176 
                    9.9094238,9.8090878 10.365967,9.4510155 
                    C10.82251,9.0929432 11.176106,8.7527733 
                    11.426758,8.4305077 z M14.65086,8.4305077 
                    L18.566387,8.4305077 L18.566387,9.3435936 
                    L15.671368,9.3435936 L15.671368,11.255703 
                    C15.936341,11.058764 16.27293,10.960293 
                    16.681133,10.960293 C17.411602,10.960293 
                    17.969301,11.178717 18.354229,11.615566 
                    C18.739157,12.052416 18.931622,12.673672
                    18.931622,13.479336 C18.931622,15.452317 
                    18.052553,16.438808 16.294415,16.438808
                    C15.560365,16.438808 14.951641,16.234707 
                    14.468243,15.826504 L14.881817,14.929531
                    C15.368796,15.326992 15.837872,15.525723 
                    16.289043,15.525723 C17.298809,15.525723 
                    17.803692,14.895514 17.803692,13.635098 
                    C17.803692,12.460618 17.305971,11.873379 
                    16.310528,11.873379 C15.83071,11.873379 
                    15.399232,12.079271 15.016094,12.491055
                    L14.65086,12.238613 z</Geometry>
	<Geometry x:Key="PathMenuItem" po:Freeze="True">M678.4 512l-365.619-379.904c-13.722-13.824-13.722-36.198 0-50.125 13.722-13.824 35.891-13.824 49.613 0l400.896 404.89c13.722 13.875 13.722 36.301 0 50.125l-400.896 404.89c-13.722 13.875-35.891 13.824-49.613 0-13.722-13.773-13.722-36.198 0-50.125l365.619-379.75z</Geometry>
	<Geometry x:Key="PathSortArrow" po:Freeze="True">M854 512l-342 342-342-342 62-60 238 238v-520h84v520l240-238z</Geometry>
	<Geometry x:Key="PathMetroWindowMaximize" po:Freeze="True">M0.99999994,0.99999994 L0.99999994,9 9,9 9,0.99999994 z M0,0 L10,0 10,10 0,10 z</Geometry>
	<Geometry x:Key="PathMetroWindowRestore" po:Freeze="True">M1,3 L1,9 7,9 7,3 z M3,0.99999994 L3,2 8,2 8,7 9,7 9,0.99999994 z M2,0 L10,0 10,8 8,8 8,10 0,10 0,2 2,2 z</Geometry>
	<Geometry x:Key="PathMetroWindowClose" po:Freeze="True">M 1301 69.6875 L 1305.3049 74 L 1300.9375 78.5313 L 1301.6324 79.2263 L 1306 74.735 L 1310.4263 79.2613 L 1311.1563 78.5313 L 1306.7 74 L 1310.9375 69.6875 L 1310.2075 68.9575 L 1306 73.265 L 1301.6949 68.9925 L 1301 69.6875 Z</Geometry>
	<Geometry x:Key="PathInformation" po:Freeze="True">M426 726l384-384-60-62-324 324-152-152-60 60zM512 86c236 0 426 190 426 426s-190 426-426 426-426-190-426-426 190-426 426-426z</Geometry>
	<Geometry x:Key="PathWarning" po:Freeze="True">M512 960c-281.6 0-512-230.4-512-512s230.4-512 512-512 512 230.4 512 512-230.4 512-512 512zM576 128h-128v448h128v-448zM576 640h-128v128h128v-128z</Geometry>
	<Geometry x:Key="PathQuestion" po:Freeze="True">M10 20a10 10 0 1 1 0-20 10 10 0 0 1 0 20zm2-13c0 .28-.21.8-.42 1L10 9.58c-.57.58-1 1.6-1 2.42v1h2v-1c0-.29.21-.8.42-1L13 9.42c.57-.58 1-1.6 1-2.42a4 4 0 1 0-8 0h2a2 2 0 1 1 4 0zm-3 8v2h2v-2H9z</Geometry>
	<Geometry x:Key="PathError" po:Freeze="True">M264 456Q210 456 164 429 118 402 91 356 64 310 64 256 64 202 91 156 118 110 164 83 210 56 264 56 318 56 364 83 410 110 437 156 464 202 464 256 464 310 437 356 410 402 364 429 318 456 264 456ZM264 288L328 352 360 320 296 256 360 192 328 160 264 224 200 160 168 192 232 256 168 320 200 352 264 288Z</Geometry>
	<CubicEase x:Key="CubicEaseInOut" EasingMode="EaseInOut" />
	<PowerEase x:Key="PowerEaseInOut" EasingMode="EaseInOut" />
	<ExponentialEase x:Key="ExponentialEaseOut" EasingMode="EaseOut" />
	<SineEase x:Key="SineEaseOut" EasingMode="EaseOut" />
	<SineEase x:Key="SineEaseInOut" EasingMode="EaseInOut" />
	<sys:Double x:Key="EnabledOpacity">0.7</sys:Double>
	<sys:Double x:Key="NormalCornerRadius">4</sys:Double>
	<sys:Double x:Key="MinHeight">40</sys:Double>
	<sys:Double x:Key="MinDataGridRowHeight">48</sys:Double>
	<DropShadowEffect x:Key="NormalShadowDepth" BlurRadius="5" ShadowDepth="1" Direction="270" Color="#AA000000" Opacity=".42" RenderingBias="Performance" />
	<BooleanToVisibilityConverter x:Key="bool2VisibilityConverter" />
	<converts:ObjectNullToVisibilityConverter x:Key="ObjectNullToVisibilityConverter" />
	<sys:Double x:Key="ThumbWidth">16</sys:Double>
	<sys:Double x:Key="ThumbCornerRadius">8</sys:Double>
	<sys:Double x:Key="RepeatButtonSize">5</sys:Double>
	<ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
		<Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
	</ControlTemplate>
	<converts:DoubleMinConverter x:Key="DoubleMinConverter" />
	<Thickness x:Key="BorderThickness">0,0,0,2</Thickness>
	<Style x:Key="TreeViewItemFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="0,0,0,0" StrokeThickness="5" Stroke="Black" StrokeDashArray="1 2" Opacity="0" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<SolidColorBrush x:Key="SecondaryTextSolidColorBrush" Color="{StaticResource SecondaryTextColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="PlaceholderTextSolidColorBrush" Color="{StaticResource PlaceholderTextColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="NormalSolidColorBrush" Color="{StaticResource NormalColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="SuccessSolidColorBrush" Color="{StaticResource SuccessColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="SuccessMouseOverSolidColorBrush" Color="{StaticResource SuccessMouseOverColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="SuccessPressedSolidColorBrush" Color="{StaticResource SuccessPressedColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="WarningSolidColorBrush" Color="{StaticResource WarningColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="WarningMouseOverSolidColorBrush" Color="{StaticResource WarningMouseOverColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="WarningPressedSolidColorBrush" Color="{StaticResource WarningPressedColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="DangerSolidColorBrush" Color="{StaticResource DangerColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="DangerMouseOverSolidColorBrush" Color="{StaticResource DangerMouseOverColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="DangerPressedSolidColorBrush" Color="{StaticResource DangerPressedColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="InfoSolidColorBrush" Color="{StaticResource InfoColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="InfoMouseOverSolidColorBrush" Color="{StaticResource InfoMouseOverColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="InfoPressedSolidColorBrush" Color="{StaticResource InfoPressedColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="ExtralightSolidColorBrush" Color="{StaticResource ExtralightColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="BlackSolidColorBrush" Color="{StaticResource BlackColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="CircularSingularSolidColorBrush" Color="{StaticResource CircularSingularColor}" po:Freeze="True" />
	<SolidColorBrush x:Key="CircularDualSolidColorBrush" Color="{StaticResource CircularDualColor}" po:Freeze="True" />
	<Style x:Key="ControlBasicStyle" TargetType="Control">
		<Setter Property="FontSize" Value="{DynamicResource NormalFontSize}" />
		<Setter Property="FontFamily" Value="{DynamicResource NormalFontFamily}" />
		<Setter Property="FontStyle" Value="{DynamicResource NormalFontStyle}" />
		<Setter Property="FontWeight" Value="{DynamicResource NormalFontWeight}" />
		<Setter Property="FontStretch" Value="{DynamicResource NormalFontStretch}" />
		<Setter Property="TextElement.FontSize" Value="{DynamicResource NormalFontSize}" />
		<Setter Property="TextElement.FontFamily" Value="{DynamicResource NormalFontFamily}" />
		<Setter Property="TextElement.FontStyle" Value="{DynamicResource NormalFontStyle}" />
		<Setter Property="TextElement.FontWeight" Value="{DynamicResource NormalFontWeight}" />
		<Setter Property="TextElement.FontStretch" Value="{DynamicResource NormalFontStretch}" />
		<Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryTextSolidColorBrush}" />
		<Setter Property="TextBlock.FontSize" Value="{DynamicResource NormalFontSize}" />
		<Setter Property="TextBlock.FontFamily" Value="{DynamicResource NormalFontFamily}" />
		<Setter Property="TextBlock.FontStyle" Value="{DynamicResource NormalFontStyle}" />
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource NormalFontWeight}" />
		<Setter Property="TextBlock.FontStretch" Value="{DynamicResource NormalFontStretch}" />
		<Setter Property="TextBlock.Foreground" Value="{DynamicResource PrimaryTextSolidColorBrush}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Opacity" Value="{StaticResource EnabledOpacity}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<DropShadowEffect x:Key="PopupShadowDepth" BlurRadius="12" ShadowDepth="2" Color="{StaticResource BlackColor}" Opacity="0.1" />
	<Style x:Key="BaseButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="helpers:ElementHelper.CornerRadius" Value="3" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="20,10" />
		<Setter Property="Cursor" Value="Hand" />
	</Style>
	<Style x:Key="PrimaryButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButton}">
		<Setter Property="Foreground" Value="{DynamicResource WindowForegroundColorBrush}" />
		<Setter Property="Background" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="00:00:0.3" From="Normal" To="MouseOver" />
									<VisualTransition GeneratedDuration="00:00:0.3" From="Pressed" />
									<VisualTransition GeneratedDuration="00:00:0.3" From="MouseOver" />
									<VisualTransition GeneratedDuration="00:00:0.3" To="Normal" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" EasingFunction="{StaticResource ExponentialEaseOut}" To="{DynamicResource PrimaryMouseOverColor}" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" EasingFunction="{StaticResource ExponentialEaseOut}" To="{DynamicResource PrimaryPressedColor}" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border Name="PART_Border" CornerRadius="{Binding Path=(helpers:ElementHelper.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" />
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Grid>
					<ControlTemplate.Triggers>
						<!--<Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource EnabledOpacity}" />
                        </Trigger>-->
						<Trigger Property="IsFocused" Value="True">
							<Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource PrimaryPressedSolidColorBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButton}">
		<Setter Property="Background" Value="{DynamicResource BackgroundSolidColorBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BaseSolidColorBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" From="Normal" To="MouseOver" />
									<VisualTransition GeneratedDuration="0:0:0.1" From="Pressed" />
									<VisualTransition GeneratedDuration="0:0:0.1" From="MouseOver" />
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" EasingFunction="{StaticResource ExponentialEaseOut}" To="{DynamicResource DefaultBorderBrushColor}" />
										<ColorAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" EasingFunction="{StaticResource ExponentialEaseOut}" To="{DynamicResource DefaultBackgroundColor}" />
										<ColorAnimation Storyboard.TargetName="PART_ContentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" EasingFunction="{StaticResource ExponentialEaseOut}" To="{DynamicResource PrimaryNormalColor}" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" EasingFunction="{StaticResource ExponentialEaseOut}" To="{DynamicResource DefaultBackgroundPressedColor}" />
										<ColorAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" EasingFunction="{StaticResource ExponentialEaseOut}" To="{DynamicResource DefaultBackgroundColor}" />
										<ColorAnimation Storyboard.TargetName="PART_ContentPresenter" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" EasingFunction="{StaticResource ExponentialEaseOut}" To="{DynamicResource DefaultBackgroundPressedColor}" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="PART_Border" CornerRadius="{Binding Path=(helpers:ElementHelper.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" />
						<ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" TextElement.Foreground="{DynamicResource RegularTextSolidColorBrush}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True">
							<Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource DefaultBorderBrushSolidColorBrush}" />
							<Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource DefaultBackgroundSolidColorBrush}" />
							<Setter TargetName="PART_ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
						</Trigger>
						<!--<Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource EnabledOpacity}" />
                        </Trigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButton}" />
	<Style x:Key="PathButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseButton}">
		<Setter Property="Padding" Value="8" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Background="Transparent">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="PART_ContentPresenter" Opacity=".8" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" TargetName="PART_ContentPresenter" Value="1" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextSolidColorBrush}" />
		<Setter Property="Padding" Value="3" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="MinWidth" Value="30" />
		<Setter Property="MinHeight" Value="28" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid Background="Transparent">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PART_ContentPresenter" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PART_ContentPresenter" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation Duration="0" To="0.3" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PART_ContentPresenter" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused" />
								<VisualState x:Name="Unfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Rectangle Fill="Transparent" />
						<ContentPresenter x:Name="PART_ContentPresenter" Opacity="0.7" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="WPFDevelopersWindow" TargetType="{x:Type wpfdev:Window}" BasedOn="{x:Null}">
		<Setter Property="Foreground" Value="{DynamicResource WindowForegroundColorBrush}" />
		<Setter Property="Background" Value="{DynamicResource BackgroundSolidColorBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource WindowBorderBrushSolidColorBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="IsTabStop" Value="False" />
		<!--<Setter Property="ResizeMode" Value="CanResizeWithGrip" />-->
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
		<Setter Property="WindowStyle" Value="None" />
		<Setter Property="MaxHeight" Value="{x:Static SystemParameters.MaximizedPrimaryScreenHeight}" />
		<Setter Property="MaxWidth" Value="{x:Static SystemParameters.MaximizedPrimaryScreenWidth}" />
		<Setter Property="FontFamily" Value="{DynamicResource NormalFontFamily}" />
		<Setter Property="WindowChrome.WindowChrome">
			<Setter.Value>
				<WindowChrome GlassFrameThickness="0,0,0,.1" UseAeroCaptionButtons="False" CaptionHeight="{Binding TitleHeight,RelativeSource={RelativeSource AncestorType=wpfdev:Window}}" />
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type wpfdev:Window}">
					<Border SnapsToDevicePixels="True" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<Grid Background="{TemplateBinding Background}" x:Name="LayoutRoot">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>
							<Grid Grid.Row="0" Height="{TemplateBinding TitleHeight}" Background="{TemplateBinding BorderBrush}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" MinWidth="30" />
								</Grid.ColumnDefinitions>
								<Image Source="{TemplateBinding Icon}" Stretch="Fill" VerticalAlignment="Center" HorizontalAlignment="Left" Width="30" Height="30" Margin="14,0,0,0" RenderOptions.BitmapScalingMode="HighQuality" Visibility="{TemplateBinding Icon,Converter={StaticResource ObjectNullToVisibilityConverter}}" />
								<TextBlock Text="{TemplateBinding Title}" x:Name="PART_Title" Margin="6,0" Foreground="{TemplateBinding Foreground}" Grid.Column="1" VerticalAlignment="Center" FontSize="{DynamicResource TitleFontSize}" />
								<WrapPanel Grid.Column="2" WindowChrome.IsHitTestVisibleInChrome="True" Margin="0,6">
									<WrapPanel x:Name="PART_MinAndMax">
										<Button Name="PART_MinimizeButton" IsTabStop="False" Padding="0" Style="{DynamicResource WindowButtonStyle}" ToolTip="Minimize" Command="SystemCommands.MinimizeWindowCommand">
											<Grid HorizontalAlignment="Center" VerticalAlignment="Center">
												<Rectangle x:Name="MinimizeGlyph" Width="10" Height="1" Margin="0 7 0 0" VerticalAlignment="Bottom" Fill="{TemplateBinding Foreground}" />
											</Grid>
										</Button>
										<Button Name="PART_MaximizeButton" IsTabStop="False" Padding="0" Style="{DynamicResource WindowButtonStyle}" ToolTip="Maximize" Command="SystemCommands.MaximizeWindowCommand">
											<Grid HorizontalAlignment="Center" VerticalAlignment="Center">
												<Path Width="10" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{DynamicResource PathMetroWindowMaximize}" Fill="{TemplateBinding Foreground}" Stretch="Fill" UseLayoutRounding="False" />
											</Grid>
										</Button>
										<Button Name="PART_RestoreButton" IsTabStop="False" Padding="0" Style="{DynamicResource WindowButtonStyle}" ToolTip="Restore" Command="SystemCommands.RestoreWindowCommand" Visibility="Collapsed">
											<Grid HorizontalAlignment="Center" VerticalAlignment="Center">
												<Path Width="10" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{DynamicResource PathMetroWindowRestore}" Fill="{TemplateBinding Foreground}" Stretch="Fill" UseLayoutRounding="False" />
											</Grid>
										</Button>
									</WrapPanel>
									<Button Name="PART_CloseButton" ToolTip="Close" IsTabStop="False" Style="{DynamicResource WindowButtonStyle}" Command="SystemCommands.CloseWindowCommand">
										<Path Width="10" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{DynamicResource PathMetroWindowClose}" Fill="{TemplateBinding Foreground}" Stretch="Fill" />
									</Button>
								</WrapPanel>
							</Grid>
							<AdornerDecorator Grid.Row="1" KeyboardNavigation.IsTabStop="False">
								<ContentPresenter x:Name="MainContentPresenter" ClipToBounds="True" />
							</AdornerDecorator>
							<ResizeGrip x:Name="ResizeGrip" HorizontalAlignment="Right" VerticalAlignment="Bottom" Grid.Row="1" IsTabStop="False" Visibility="Collapsed" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="WindowState" Value="Maximized">
							<Setter Property="Visibility" Value="Visible" TargetName="PART_RestoreButton" />
							<Setter Property="Visibility" Value="Collapsed" TargetName="PART_MaximizeButton" />
							<Setter Property="Margin" TargetName="LayoutRoot" Value="7" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ResizeMode" Value="CanResizeWithGrip" />
								<Condition Property="WindowState" Value="Normal" />
							</MultiTrigger.Conditions>
							<Setter TargetName="ResizeGrip" Property="Visibility" Value="Visible" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ResizeMode" Value="NoResize" />
								<Condition Property="WindowStyle" Value="ToolWindow" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_MinAndMax" Property="Visibility" Value="Collapsed" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultMenu" TargetType="{x:Type Menu}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextSolidColorBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Menu}">
					<Border Background="{DynamicResource BackgroundSolidColorBrush}" SnapsToDevicePixels="True">
						<!--<StackPanel ClipToBounds="True"
                      Orientation="Horizontal"
                      IsItemsHost="True" />-->
						<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type Menu}" BasedOn="{StaticResource DefaultMenu}" />
	<Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Height" Value="1" />
		<Setter Property="Margin" Value="0,2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Border BorderThickness="1" BorderBrush="{DynamicResource BaseSolidColorBrush}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="TopLevelHeaderTemplateKey" TargetType="{x:Type MenuItem}">
		<Border x:Name="Border" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" BorderThickness="1,1,1,0" BorderBrush="{TemplateBinding BorderBrush}">
			<Grid Margin="{TemplateBinding Padding}">
				<ContentPresenter Margin="6,3,6,3" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" x:Name="PART_ContentPresenter" />
				<Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" PlacementTarget="{Binding ElementName=Border}" AllowsTransparency="True" Focusable="False">
					<Grid Margin="10,0,10,10">
						<Border x:Name="SubmenuBorder" SnapsToDevicePixels="True" BorderThickness="1" Background="{DynamicResource BackgroundSolidColorBrush}" Effect="{DynamicResource PopupShadowDepth}" BorderBrush="{DynamicResource BaseSolidColorBrush}" CornerRadius="0,0,3,3">
							<ScrollViewer CanContentScroll="True" Margin="0,4">
								<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
							</ScrollViewer>
						</Border>
						<Border Height="1.2" Background="{DynamicResource BackgroundSolidColorBrush}" VerticalAlignment="Top" HorizontalAlignment="Left" BorderThickness="1,0,0,0" Width="{Binding ElementName=Border,Path=ActualWidth}" />
					</Grid>
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsSuspendingPopupAnimation" Value="True">
				<Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
			</Trigger>
			<Trigger Property="IsHighlighted" Value="True">
				<Setter Property="Background" Value="{DynamicResource BaseSolidColorBrush}" />
			</Trigger>
			<Trigger Property="IsSubmenuOpen" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource BaseSolidColorBrush}" />
				<Setter Property="Background" Value="{DynamicResource BackgroundSolidColorBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="TopLevelItemTemplateKey" TargetType="{x:Type MenuItem}">
		<Border x:Name="Border" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
			<Grid Margin="{TemplateBinding Padding}">
				<ContentPresenter Margin="6,3,6,3" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" x:Name="PART_ContentPresenter" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsHighlighted" Value="True">
				<Setter Property="Background" Value="{DynamicResource BaseSolidColorBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SubmenuItemTemplateKey" TargetType="{x:Type MenuItem}">
		<Border x:Name="Border" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
			<Grid Margin="{TemplateBinding Padding}">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
					<ColumnDefinition Width="20" />
				</Grid.ColumnDefinitions>
				<ContentPresenter x:Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
				<Border x:Name="Check" Width="13" Height="13" Visibility="Collapsed" Margin="6,0,6,0" Background="Transparent">
					<Path x:Name="CheckMark" Width="7" Height="7" Visibility="Hidden" SnapsToDevicePixels="False" StrokeThickness="2" Data="{StaticResource PathMenuItem}" Stroke="{TemplateBinding Foreground}" />
				</Border>
				<ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" VerticalAlignment="Center" RecognizesAccessKey="True" />
				<TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,0,2" DockPanel.Dock="Right" />
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="ButtonBase.Command" Value="{x:Null}" />
			<Trigger Property="Icon" Value="{x:Null}">
				<Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
			</Trigger>
			<Trigger Property="IsChecked" Value="True">
				<Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="IsCheckable" Value="True">
				<Setter TargetName="Check" Property="Visibility" Value="Visible" />
				<Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
			</Trigger>
			<Trigger Property="IsHighlighted" Value="True">
				<Setter Property="Background" Value="{DynamicResource BaseSolidColorBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SubmenuHeaderTemplateKey" TargetType="{x:Type MenuItem}">
		<Border x:Name="Border" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
			<Grid Margin="{TemplateBinding Padding}">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
					<ColumnDefinition Width="20" />
				</Grid.ColumnDefinitions>
				<ContentPresenter x:Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
				<ContentPresenter x:Name="HeaderHost" Grid.Column="1" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" />
				<TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,2,2" DockPanel.Dock="Right" />
				<Path Grid.Column="3" x:Name="PART_Path" Stretch="Fill" Height="12" Width="10" VerticalAlignment="Center" Data="{StaticResource PathMenuItem}" Fill="{TemplateBinding Foreground}" />
				<Popup x:Name="Popup" Placement="Right" HorizontalOffset="10" VerticalOffset="-4" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
					<Border x:Name="SubmenuBorder" SnapsToDevicePixels="True" Background="Transparent" Effect="{DynamicResource PopupShadowDepth}" BorderBrush="{DynamicResource BaseSolidColorBrush}" BorderThickness="1" Margin="10,0,10,10" CornerRadius="{Binding Path=(helpers:ElementHelper.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
						<ScrollViewer CanContentScroll="True" Margin="0,4">
							<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
						</ScrollViewer>
					</Border>
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="Icon" Value="{x:Null}">
				<Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
			</Trigger>
			<Trigger Property="IsHighlighted" Value="True">
				<Setter Property="Background" Value="{DynamicResource BaseSolidColorBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="DefaultMenuItem" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Height" Value="34" />
		<Setter Property="Padding" Value="10,0" />
		<Setter Property="Cursor" Value="Hand" />
		<Style.Triggers>
			<Trigger Property="Role" Value="TopLevelHeader">
				<Setter Property="MinWidth" Value="44" />
				<Setter Property="Template" Value="{StaticResource TopLevelHeaderTemplateKey}" />
				<Setter Property="Grid.IsSharedSizeScope" Value="True" />
			</Trigger>
			<Trigger Property="Role" Value="TopLevelItem">
				<Setter Property="Template" Value="{StaticResource TopLevelItemTemplateKey}" />
			</Trigger>
			<Trigger Property="Role" Value="SubmenuHeader">
				<Setter Property="MinWidth" Value="240" />
				<Setter Property="Template" Value="{StaticResource SubmenuHeaderTemplateKey}" />
			</Trigger>
			<Trigger Property="Role" Value="SubmenuItem">
				<Setter Property="MinWidth" Value="240" />
				<Setter Property="Template" Value="{StaticResource SubmenuItemTemplateKey}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource DefaultMenuItem}" />
	<Style x:Key="DefaultContextMenu" TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Background" Value="{DynamicResource BackgroundSolidColorBrush}" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ContextMenu">
					<Border Effect="{StaticResource PopupShadowDepth}" Margin="10" Background="{TemplateBinding Background}" CornerRadius="3" BorderThickness="1" BorderBrush="{DynamicResource BaseSolidColorBrush}">
						<ScrollViewer Padding="0,6">
							<ItemsPresenter />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource DefaultContextMenu}" />
	<Style x:Key="DefaultRadioButton" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Background" Value="{DynamicResource WindowForegroundColorBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="2,1" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid MinWidth="16" MinHeight="16">
								<Ellipse x:Name="PART_Border" StrokeThickness="{TemplateBinding BorderThickness}" Fill="{TemplateBinding Background}" Stroke="{DynamicResource BaseSolidColorBrush}" />
								<Ellipse x:Name="PART_Ellipse" Fill="{DynamicResource WindowForegroundColorBrush}" MinWidth="6" MinHeight="6" RenderTransformOrigin=".5,.5">
									<Ellipse.RenderTransform>
										<ScaleTransform ScaleX="0" ScaleY="0" />
									</Ellipse.RenderTransform>
								</Ellipse>
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter x:Name="PART_ContentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="{DynamicResource PrimaryTextSolidColorBrush}" />
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Unchecked" />
								<VisualState x:Name="Indeterminate" />
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="(Ellipse.RenderTransform).(ScaleTransform.ScaleX)" To=".4" Duration="00:00:.3" EasingFunction="{StaticResource ExponentialEaseOut}" />
										<DoubleAnimation Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="(Ellipse.RenderTransform).(ScaleTransform.ScaleY)" To=".4" Duration="00:00:.3" EasingFunction="{StaticResource ExponentialEaseOut}" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<!--<Setter Property="Background" TargetName="PART_Border" Value="{DynamicResource PrimaryNormalSolidColorBrush}"/>
                            <Setter Property="BorderBrush" TargetName="PART_Border" Value="{DynamicResource PrimaryNormalSolidColorBrush}"/>-->
							<Setter Property="Fill" TargetName="PART_Border" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
							<Setter Property="Stroke" TargetName="PART_Border" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
							<Setter Property="TextElement.Foreground" TargetName="PART_ContentPresenter" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="False" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Stroke" TargetName="PART_Border" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
							<!--<Setter Property="BorderBrush" TargetName="PART_Border" Value="{DynamicResource PrimaryNormalSolidColorBrush}"/>-->
							<!--<MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="PART_BeginStoryboard">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                        Storyboard.TargetName="PART_Border"
                                                        To="{StaticResource PrimaryNormalColor}" 
                                                        Duration="00:00:.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="PART_BeginStoryboard"></RemoveStoryboard>
                            </MultiTrigger.ExitActions>-->
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource DefaultRadioButton}" />
	<Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Rectangle Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Background}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border x:Name="PART_Thumbborder">
						<Rectangle x:Name="PART_Rectangle" Height="{TemplateBinding Height}" Fill="{DynamicResource InfoPressedSolidColorBrush}" RadiusX="1" RadiusY="1" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border x:Name="PART_Thumbborder">
						<Rectangle x:Name="PART_Rectangle" Height="{TemplateBinding Height}" Fill="{DynamicResource InfoPressedSolidColorBrush}" RadiusX="1" RadiusY="1" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultScrollBar" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ControlBasicStyle}">
		<Style.Resources>
			<Storyboard x:Key="ScrollMouseOut">
				<DoubleAnimation Storyboard.TargetName="PART_Track" Duration="00:00:0.1" Storyboard.TargetProperty="Width" To="2" />
			</Storyboard>
			<Storyboard x:Key="ScrollMouseOver">
				<DoubleAnimation Storyboard.TargetName="PART_Track" Duration="00:00:0.1" Storyboard.TargetProperty="Width" To="10" />
			</Storyboard>
		</Style.Resources>
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Width" Value="12" />
		<Setter Property="MinWidth" Value="8" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid Background="Transparent" x:Name="Bg" Width="{TemplateBinding Width}" SnapsToDevicePixels="True">
						<Track x:Name="PART_Track" Margin="0,0,1,0" IsDirectionReversed="True" Width="2" HorizontalAlignment="Right" IsEnabled="{TemplateBinding IsMouseOver}">
							<Track.DecreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}" />
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}" />
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb Style="{StaticResource ScrollBarThumbVertical}" />
							</Track.Thumb>
						</Track>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource ScrollMouseOut}" />
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ScrollMouseOver}" />
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Width" Value="Auto" />
				<Setter Property="MinWidth" Value="0" />
				<Setter Property="Height" Value="12" />
				<Setter Property="MinHeight" Value="8" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<ControlTemplate.Resources>
								<Storyboard x:Key="ScrollMouseOutHeight">
									<DoubleAnimation Storyboard.TargetName="PART_Track" Duration="00:00:0.1" Storyboard.TargetProperty="Height" To="2" />
								</Storyboard>
								<Storyboard x:Key="ScrollMouseOverHeight">
									<DoubleAnimation Storyboard.TargetName="PART_Track" Duration="00:00:0.1" Storyboard.TargetProperty="Height" To="10" />
								</Storyboard>
							</ControlTemplate.Resources>
							<Grid Height="{TemplateBinding Height}" Background="Transparent" SnapsToDevicePixels="True">
								<Track x:Name="PART_Track" Margin="0,0,0,1" IsEnabled="{TemplateBinding IsMouseOver}" Height="2" VerticalAlignment="Bottom" Visibility="Hidden">
									<Track.DecreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}" />
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}" />
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb Style="{StaticResource ScrollBarThumbHorizontal}" />
									</Track.Thumb>
								</Track>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True">
									<Trigger.ExitActions>
										<BeginStoryboard Storyboard="{StaticResource ScrollMouseOutHeight}" />
									</Trigger.ExitActions>
									<Trigger.EnterActions>
										<BeginStoryboard Storyboard="{StaticResource ScrollMouseOverHeight}" />
									</Trigger.EnterActions>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="ScrollBarHideStyle" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ControlBasicStyle}">
		<Style.Resources>
			<Storyboard x:Key="ScrollMouseOut">
				<DoubleAnimation Storyboard.TargetName="PART_Track" Duration="00:00:0.1" Storyboard.TargetProperty="Width" To="2" />
			</Storyboard>
			<Storyboard x:Key="ScrollMouseOver">
				<DoubleAnimation Storyboard.TargetName="PART_Track" Duration="00:00:0.1" Storyboard.TargetProperty="Width" To="10" />
			</Storyboard>
		</Style.Resources>
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="Width" Value="12" />
		<Setter Property="MinWidth" Value="8" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollBar}">
					<Grid Background="Transparent" Width="{TemplateBinding Width}" SnapsToDevicePixels="True">
						<Track x:Name="PART_Track" Margin="0,0,1,0" IsDirectionReversed="True" Width="2" HorizontalAlignment="Right" IsEnabled="{TemplateBinding IsMouseOver}">
							<Track.DecreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}" />
							</Track.DecreaseRepeatButton>
							<Track.IncreaseRepeatButton>
								<RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}" />
							</Track.IncreaseRepeatButton>
							<Track.Thumb>
								<Thumb Style="{StaticResource ScrollBarThumbVertical}" />
							</Track.Thumb>
						</Track>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource ScrollMouseOut}" />
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ScrollMouseOver}" />
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Width" Value="Auto" />
				<Setter Property="MinWidth" Value="0" />
				<Setter Property="Height" Value="12" />
				<Setter Property="MinHeight" Value="8" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ScrollBar}">
							<ControlTemplate.Resources>
								<Storyboard x:Key="ScrollMouseOutHeight">
									<DoubleAnimation Storyboard.TargetName="PART_Track" Duration="00:00:0.1" Storyboard.TargetProperty="Height" To="2" />
								</Storyboard>
								<Storyboard x:Key="ScrollMouseOverHeight">
									<DoubleAnimation Storyboard.TargetName="PART_Track" Duration="00:00:0.1" Storyboard.TargetProperty="Height" To="10" />
								</Storyboard>
							</ControlTemplate.Resources>
							<Grid Height="{TemplateBinding Height}" Background="Transparent" SnapsToDevicePixels="True">
								<Track x:Name="PART_Track" Margin="0,0,0,1" IsEnabled="{TemplateBinding IsMouseOver}" Height="2" VerticalAlignment="Bottom" Visibility="Hidden">
									<Track.DecreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}" />
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}" />
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb Style="{StaticResource ScrollBarThumbHorizontal}" />
									</Track.Thumb>
								</Track>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True">
									<Trigger.ExitActions>
										<BeginStoryboard Storyboard="{StaticResource ScrollMouseOutHeight}" />
									</Trigger.ExitActions>
									<Trigger.EnterActions>
										<BeginStoryboard Storyboard="{StaticResource ScrollMouseOverHeight}" />
									</Trigger.EnterActions>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="DefaultScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="*" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="0" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
						<ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="1" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource DefaultScrollBar}" />
	<Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource DefaultScrollViewer}" />
	<ControlTemplate x:Key="SliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
		<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
			<Border BorderBrush="{DynamicResource PrimaryPressedSolidColorBrush}" BorderThickness="2" Background="{DynamicResource BackgroundSolidColorBrush}" SnapsToDevicePixels="True" Height="{StaticResource ThumbWidth}" Width="{StaticResource ThumbWidth}" CornerRadius="8" Margin="-1,0,0,0" Name="PART_Border" RenderTransformOrigin=".5,.5" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="RenderTransform" TargetName="PART_Border">
					<Setter.Value>
						<ScaleTransform ScaleX="1.2" ScaleY="1.2" />
					</Setter.Value>
				</Setter>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
		<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
			<Border BorderBrush="{DynamicResource PrimaryNormalSolidColorBrush}" BorderThickness="2" Background="{DynamicResource BackgroundSolidColorBrush}" SnapsToDevicePixels="True" Height="{StaticResource ThumbWidth}" Width="{StaticResource ThumbWidth}" CornerRadius="8" Margin="-1,0,0,0" Name="PART_Border" RenderTransformOrigin=".5,.5" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="RenderTransform" TargetName="PART_Border">
					<Setter.Value>
						<ScaleTransform ScaleX="1.2" ScaleY="1.2" />
					</Setter.Value>
				</Setter>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SliderThumbHorizontal" TargetType="{x:Type Thumb}">
		<ControlTemplate.Resources>
			<!--<Storyboard x:Key="ThumbMouseOut">
                <DoubleAnimation Storyboard.TargetName="PART_Border"
                                 Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                 To="1" Duration="00:00:0.1"/>
                <DoubleAnimation Storyboard.TargetName="PART_Border"
                                 Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                 To="1" Duration="00:00:0.1"/>
            </Storyboard>-->
			<Storyboard x:Key="ThumbMouseOver">
				<DoubleAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" From="1" To="1.2" Duration="00:00:0.1" />
				<DoubleAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" From="1" To="1.2" Duration="00:00:0.1" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
			<Border BorderBrush="{DynamicResource PrimaryNormalSolidColorBrush}" BorderThickness="2" Background="{DynamicResource WindowForegroundColorBrush}" SnapsToDevicePixels="True" Height="{StaticResource ThumbWidth}" Width="{StaticResource ThumbWidth}" CornerRadius="8" Margin="-1,0,0,0" Name="PART_Border" RenderTransformOrigin=".5,.5">
				<Border.RenderTransform>
					<ScaleTransform />
				</Border.RenderTransform>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Trigger.EnterActions>
					<BeginStoryboard x:Name="BeginStoryboard" Storyboard="{StaticResource ThumbMouseOver}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<StopStoryboard BeginStoryboardName="BeginStoryboard" />
					<!--<BeginStoryboard Storyboard="{StaticResource ThumbMouseOut}" />-->
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SliderThumbHorizontalDefault" TargetType="{x:Type Thumb}">
		<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
			<Border BorderBrush="{DynamicResource PrimaryNormalSolidColorBrush}" BorderThickness="2" Background="{DynamicResource BackgroundSolidColorBrush}" SnapsToDevicePixels="True" Height="{StaticResource ThumbWidth}" Width="{StaticResource ThumbWidth}" CornerRadius="8" Margin="-1,0,0,0" Name="PART_Border" RenderTransformOrigin=".5,.5" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="RenderTransform" TargetName="PART_Border">
					<Setter.Value>
						<ScaleTransform ScaleX="1.2" ScaleY="1.2" />
					</Setter.Value>
				</Setter>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Padding="2">
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
					<RowDefinition Height="Auto" />
				</Grid.RowDefinitions>
				<TickBar x:Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed" />
				<TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed" />
				<Border x:Name="TrackBackground" Height="6.0" Margin="5,0" Grid.Row="1" VerticalAlignment="center">
					<Canvas Margin="-6,-1">
						<Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Height="4.0" Visibility="Hidden" />
					</Canvas>
				</Border>
				<Track x:Name="PART_Track" Grid.Row="1">
					<Track.DecreaseRepeatButton>
						<RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{DynamicResource RepeatButtonTransparent}" Background="{DynamicResource PrimaryNormalSolidColorBrush}" Height="{StaticResource RepeatButtonSize}" />
					</Track.DecreaseRepeatButton>
					<Track.IncreaseRepeatButton>
						<RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}" Background="{DynamicResource LightSolidColorBrush}" Height="{StaticResource RepeatButtonSize}" />
					</Track.IncreaseRepeatButton>
					<Track.Thumb>
						<Thumb x:Name="Thumb" Focusable="False" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbHorizontal}" VerticalAlignment="Center" />
					</Track.Thumb>
				</Track>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="TickPlacement" Value="TopLeft">
				<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
				<Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontal}" />
				<Setter Property="Margin" TargetName="TrackBackground" Value="5,2,5,0" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="BottomRight">
				<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
				<Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbHorizontal}" />
				<Setter Property="Margin" TargetName="TrackBackground" Value="5,0,5,2" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="Both">
				<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
				<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
			</Trigger>
			<Trigger Property="IsSelectionRangeEnabled" Value="True">
				<Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible" />
			</Trigger>
			<Trigger Property="IsKeyboardFocused" Value="True">
				<Setter Property="Foreground" TargetName="Thumb" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SliderThumbVerticalLeft" TargetType="{x:Type Thumb}">
		<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
			<Border BorderBrush="{DynamicResource PrimaryNormalSolidColorBrush}" BorderThickness="2" Background="{DynamicResource BackgroundSolidColorBrush}" SnapsToDevicePixels="True" UseLayoutRounding="True" Height="{StaticResource ThumbWidth}" Width="{StaticResource ThumbWidth}" CornerRadius="8" Name="PART_Border" RenderTransformOrigin=".5,.5" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="RenderTransform" TargetName="PART_Border">
					<Setter.Value>
						<ScaleTransform ScaleX="1.2" ScaleY="1.2" />
					</Setter.Value>
				</Setter>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SliderThumbVerticalRight" TargetType="{x:Type Thumb}">
		<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
			<Border BorderBrush="{DynamicResource PrimaryNormalSolidColorBrush}" BorderThickness="2" Background="{DynamicResource BackgroundSolidColorBrush}" SnapsToDevicePixels="True" Height="{StaticResource ThumbWidth}" Width="{StaticResource ThumbWidth}" CornerRadius="8" Name="PART_Border" RenderTransformOrigin=".5,.5" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="RenderTransform" TargetName="PART_Border">
					<Setter.Value>
						<ScaleTransform ScaleX="1.2" ScaleY="1.2" />
					</Setter.Value>
				</Setter>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SliderThumbVerticalDefault" TargetType="{x:Type Thumb}">
		<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
			<Border BorderBrush="{DynamicResource PrimaryNormalSolidColorBrush}" BorderThickness="2" Background="{DynamicResource BackgroundSolidColorBrush}" SnapsToDevicePixels="True" UseLayoutRounding="True" Height="{StaticResource ThumbWidth}" Width="{StaticResource ThumbWidth}" CornerRadius="8" Margin="0,0,0,-1" Name="PART_Border" RenderTransformOrigin=".5,.5" />
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="RenderTransform" TargetName="PART_Border">
					<Setter.Value>
						<ScaleTransform ScaleX="1.2" ScaleY="1.2" />
					</Setter.Value>
				</Setter>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SliderThumbVertical" TargetType="{x:Type Thumb}">
		<ControlTemplate.Resources>
			<!--<Storyboard x:Key="ThumbMouseOut">
                <DoubleAnimation Storyboard.TargetName="PART_Border"
                                 Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)"
                                 To="1" Duration="00:00:0.1"/>
                <DoubleAnimation Storyboard.TargetName="PART_Border"
                                 Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)"
                                 To="1" Duration="00:00:0.1"/>
            </Storyboard>-->
			<Storyboard x:Key="ThumbMouseOver">
				<DoubleAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" From="1" To="1.2" Duration="00:00:0.1" />
				<DoubleAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" From="1" To="1.2" Duration="00:00:0.1" />
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid HorizontalAlignment="Center" UseLayoutRounding="True" VerticalAlignment="Center">
			<Border BorderBrush="{DynamicResource PrimaryNormalSolidColorBrush}" BorderThickness="2" Background="{DynamicResource BackgroundSolidColorBrush}" SnapsToDevicePixels="True" UseLayoutRounding="True" Height="{StaticResource ThumbWidth}" Width="{StaticResource ThumbWidth}" CornerRadius="8" Margin="0,0,0,-1" Name="PART_Border" RenderTransformOrigin=".5,.5">
				<Border.RenderTransform>
					<ScaleTransform />
				</Border.RenderTransform>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Trigger.EnterActions>
					<BeginStoryboard x:Name="BeginStoryboard" Storyboard="{StaticResource ThumbMouseOver}" />
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<StopStoryboard BeginStoryboardName="BeginStoryboard" />
					<!--<BeginStoryboard Storyboard="{StaticResource ThumbMouseOut}" />-->
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
		<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Padding="2">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto" />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>
				<TickBar x:Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4" />
				<TickBar x:Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4" />
				<Border x:Name="TrackBackground" HorizontalAlignment="center" Margin="0,5" Width="6.0">
					<Canvas Margin="-1,-6">
						<Rectangle x:Name="PART_SelectionRange" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Visibility="Hidden" Width="4.0" />
					</Canvas>
				</Border>
				<Track x:Name="PART_Track" Grid.Column="1">
					<Track.DecreaseRepeatButton>
						<RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource RepeatButtonTransparent}" Background="{DynamicResource PrimaryNormalSolidColorBrush}" Width="{StaticResource RepeatButtonSize}" />
					</Track.DecreaseRepeatButton>
					<Track.IncreaseRepeatButton>
						<RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource RepeatButtonTransparent}" Background="{DynamicResource LightSolidColorBrush}" Width="{StaticResource RepeatButtonSize}" />
					</Track.IncreaseRepeatButton>
					<Track.Thumb>
						<Thumb x:Name="Thumb" Focusable="False" OverridesDefaultStyle="True" Template="{StaticResource SliderThumbVertical}" VerticalAlignment="Top" />
					</Track.Thumb>
				</Track>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="TickPlacement" Value="TopLeft">
				<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
				<Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVertical}" />
				<Setter Property="Margin" TargetName="TrackBackground" Value="2,5,0,5" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="BottomRight">
				<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
				<Setter Property="Template" TargetName="Thumb" Value="{StaticResource SliderThumbVertical}" />
				<Setter Property="Margin" TargetName="TrackBackground" Value="0,5,2,5" />
			</Trigger>
			<Trigger Property="TickPlacement" Value="Both">
				<Setter Property="Visibility" TargetName="TopTick" Value="Visible" />
				<Setter Property="Visibility" TargetName="BottomTick" Value="Visible" />
			</Trigger>
			<Trigger Property="IsSelectionRangeEnabled" Value="True">
				<Setter Property="Visibility" TargetName="PART_SelectionRange" Value="Visible" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style x:Key="DefaultSlider" TargetType="{x:Type Slider}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="False" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
		<Setter Property="Template" Value="{StaticResource SliderHorizontal}" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Template" Value="{StaticResource SliderVertical}" />
			</Trigger>
			<!--<Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{StaticResource EnabledOpacity}" />
            </Trigger>-->
		</Style.Triggers>
	</Style>
	<Style TargetType="{x:Type Slider}" BasedOn="{StaticResource DefaultSlider}" />
	<Style x:Key="DefaultTextBlock" TargetType="{x:Type TextBlock}">
		<Setter Property="FontSize" Value="{DynamicResource NormalFontSize}" />
		<Setter Property="FontFamily" Value="{DynamicResource NormalFontFamily}" />
		<Setter Property="FontStyle" Value="{DynamicResource NormalFontStyle}" />
		<Setter Property="FontStretch" Value="{DynamicResource NormalFontStretch}" />
		<Setter Property="TextElement.FontSize" Value="{DynamicResource NormalFontSize}" />
		<Setter Property="TextElement.FontFamily" Value="{DynamicResource NormalFontFamily}" />
		<Setter Property="TextElement.FontStyle" Value="{DynamicResource NormalFontStyle}" />
		<Setter Property="TextElement.FontStretch" Value="{DynamicResource NormalFontStretch}" />
		<Setter Property="TextBlock.FontSize" Value="{DynamicResource NormalFontSize}" />
		<Setter Property="TextBlock.FontFamily" Value="{DynamicResource NormalFontFamily}" />
		<Setter Property="TextBlock.FontStyle" Value="{DynamicResource NormalFontStyle}" />
		<Setter Property="TextBlock.FontStretch" Value="{DynamicResource NormalFontStretch}" />
	</Style>
	<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource DefaultTextBlock}" />
	<Style x:Key="DefaultHyperlink" TargetType="{x:Type Hyperlink}">
		<Setter Property="FontSize" Value="{DynamicResource NormalFontSize}" />
		<Setter Property="FontFamily" Value="{DynamicResource NormalFontFamily}" />
		<Setter Property="FontStyle" Value="{DynamicResource NormalFontStyle}" />
		<Setter Property="FontWeight" Value="{DynamicResource NormalFontWeight}" />
		<Setter Property="FontStretch" Value="{DynamicResource NormalFontStretch}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextSolidColorBrush}" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
		<Setter Property="TextBlock.TextDecorations" Value="{x:Null}" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<!--<Setter Property="Foreground" Value="{DynamicResource PrimaryNormalSolidColorBrush}"/>-->
				<!--<Setter Property="FontWeight" Value="Normal" />-->
				<Setter Property="TextBlock.TextDecorations">
					<Setter.Value>
						<TextDecorationCollection>
							<TextDecoration Location="Underline" />
						</TextDecorationCollection>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style TargetType="{x:Type Hyperlink}" BasedOn="{StaticResource DefaultHyperlink}" />
	<Style x:Key="DefaultCheckBox" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<Border CornerRadius="{Binding ElementName=PART_Border,Path=CornerRadius}">
								<Border x:Name="PART_Border" Width="16" Height="16" CornerRadius="3" BorderThickness="1" BorderBrush="{DynamicResource BaseSolidColorBrush}" Background="{DynamicResource WindowForegroundColorBrush}">
									<Grid>
										<Path x:Name="PART_CheckMark" SnapsToDevicePixels="False" VerticalAlignment="Center" HorizontalAlignment="Center" Data="{StaticResource PathCheckMark}" RenderTransformOrigin=".5,.5" Stretch="Fill" Fill="{DynamicResource WindowForegroundColorBrush}">
											<Path.RenderTransform>
												<ScaleTransform ScaleX="0" ScaleY="0" />
											</Path.RenderTransform>
										</Path>
										<Rectangle Width="6" Height="2" VerticalAlignment="Center" HorizontalAlignment="Center" x:Name="PART_InderminateMark" RenderTransformOrigin=".5,.5" Fill="{DynamicResource PrimaryNormalSolidColorBrush}">
											<Rectangle.RenderTransform>
												<ScaleTransform ScaleX="0" />
											</Rectangle.RenderTransform>
										</Rectangle>
									</Grid>
								</Border>
							</Border>
						</BulletDecorator.Bullet>
						<ContentPresenter x:Name="PART_ContentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="2,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.Foreground="{DynamicResource PrimaryTextSolidColorBrush}" />
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<!--<ColorAnimation Storyboard.TargetName="PART_Border"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                                        To="{DynamicResource PrimaryPressedColor}"
                                                        Duration="00:00:.1"/>-->
										<!--<ColorAnimation Storyboard.TargetName="PART_ContentPresenter"
                                                        Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                                        To="{DynamicResource PrimaryPressedColor}"
                                                        Duration="00:00:.1"/>-->
										<DoubleAnimation Storyboard.TargetName="PART_CheckMark" Storyboard.TargetProperty="(Path.RenderTransform).(ScaleTransform.ScaleX)" To=".7" Duration="00:00:.2" EasingFunction="{StaticResource ExponentialEaseOut}" />
										<DoubleAnimation Storyboard.TargetName="PART_CheckMark" Storyboard.TargetProperty="(Path.RenderTransform).(ScaleTransform.ScaleY)" To=".5" Duration="00:00:.2" EasingFunction="{StaticResource ExponentialEaseOut}" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked" />
								<VisualState x:Name="Indeterminate" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<!--<Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource EnabledOpacity}" />
                        </Trigger>-->
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Background" TargetName="PART_Border" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
							<Setter Property="BorderBrush" TargetName="PART_Border" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
							<Setter Property="TextElement.Foreground" TargetName="PART_ContentPresenter" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Trigger.EnterActions>
								<BeginStoryboard x:Name="PART_BeginStoryboardIsCheckedNull">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_InderminateMark" Storyboard.TargetProperty="(Path.RenderTransform).(ScaleTransform.ScaleX)" To="1" Duration="00:00:.2" EasingFunction="{StaticResource ExponentialEaseOut}" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<RemoveStoryboard BeginStoryboardName="PART_BeginStoryboardIsCheckedNull" />
							</Trigger.ExitActions>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="False" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="PART_Border" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
							<!--本来使用动画，但是动画会导致无法修改主题颜色-->
							<!--<MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="PART_BeginStoryboard">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                        Storyboard.TargetName="PART_Border"
                                                        To="{StaticResource PrimaryNormalColor}" 
                                                        Duration="00:00:.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="PART_BeginStoryboard"></RemoveStoryboard>
                            </MultiTrigger.ExitActions>-->
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource DefaultCheckBox}" />
	<Style x:Key="DefaultTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="6,0" />
		<Setter Property="AllowDrop" Value="true" />
		<Setter Property="MinHeight" Value="{StaticResource MinHeight}" />
		<Setter Property="MinWidth" Value="180" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="SelectionBrush" Value="{DynamicResource WindowBorderBrushSolidColorBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Border Name="PART_Border" CornerRadius="{Binding Path=(helpers:ElementHelper.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" BorderBrush="{DynamicResource BaseSolidColorBrush}">
						<Border.Background>
							<SolidColorBrush Color="{DynamicResource BackgroundColor}" />
						</Border.Background>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Disabled" />
								<VisualState x:Name="ReadOnly" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimation Duration="00:00:0.3" Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{DynamicResource PrimaryNormalColor}" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid Margin="{TemplateBinding Padding}">
							<TextBlock x:Name="PART_TextBlockWatermark" Text="{Binding Path=(helpers:ElementHelper.Watermark),RelativeSource={RelativeSource TemplatedParent}}" Foreground="{DynamicResource RegularTextSolidColorBrush}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontSize="{StaticResource NormalFontSize}" Margin="7.5,0" Visibility="Collapsed" />
							<ScrollViewer x:Name="PART_ContentHost" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Text" Value="" />
								<Condition Property="helpers:ElementHelper.IsWatermark" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Visibility" TargetName="PART_TextBlockWatermark" Value="Visible" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Text" Value="{x:Null}" />
								<Condition Property="helpers:ElementHelper.IsWatermark" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Visibility" TargetName="PART_TextBlockWatermark" Value="Visible" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBox}" />
	<ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<Border x:Name="PART_Border" Padding="6,0" BorderThickness="0" SnapsToDevicePixels="true">
			<Grid Background="Transparent">
				<Grid.ColumnDefinitions>
					<ColumnDefinition />
					<ColumnDefinition Width="30" />
				</Grid.ColumnDefinitions>
				<Rectangle Grid.Column="1" Cursor="Hand" Fill="Transparent" Height="Auto" Width="30" />
				<Path x:Name="PART_Arrow" Grid.Column="1" Stretch="Fill" Height="6" Width="10" HorizontalAlignment="Center" VerticalAlignment="Center" Cursor="Hand" Data="{StaticResource PathComboBoxToggleButton}" RenderTransformOrigin=".5,.5">
					<Path.Fill>
						<SolidColorBrush Color="{DynamicResource PlaceholderTextColor}" />
					</Path.Fill>
					<Path.RenderTransform>
						<RotateTransform Angle="0" />
					</Path.RenderTransform>
				</Path>
			</Grid>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualState x:Name="Normal" />
					<VisualState x:Name="MouseOver" />
					<VisualState x:Name="Pressed" />
					<VisualState x:Name="Disabled" />
				</VisualStateGroup>
				<VisualStateGroup x:Name="CheckStates">
					<VisualState x:Name="Checked">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="PART_Arrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="-180" Duration="00:00:.3" EasingFunction="{StaticResource ExponentialEaseOut}" />
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unchecked">
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="PART_Arrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="0" Duration="00:00:.3" EasingFunction="{StaticResource ExponentialEaseOut}" />
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Indeterminate" />
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
		</Border>
	</ControlTemplate>
	<Style x:Key="DefaultComboBox" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Setter Property="MinWidth" Value="120" />
		<Setter Property="MinHeight" Value="{StaticResource MinHeight}" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OpenStoryboard">
							<DoubleAnimation Storyboard.TargetName="PART_DropDown" Storyboard.TargetProperty="(Grid.RenderTransform).(ScaleTransform.ScaleY)" To="1" Duration="00:00:.2" EasingFunction="{StaticResource ExponentialEaseOut}" />
						</Storyboard>
						<Storyboard x:Key="CloseStoryboard">
							<DoubleAnimation Storyboard.TargetName="PART_DropDown" Storyboard.TargetProperty="(Grid.RenderTransform).(ScaleTransform.ScaleY)" To="0" Duration="00:00:.2" EasingFunction="{StaticResource ExponentialEaseOut}" />
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" EasingFunction="{StaticResource ExponentialEaseOut}" Duration="00:00:.1" To="{DynamicResource PrimaryNormalColor}" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled" />
							</VisualStateGroup>
							<VisualStateGroup x:Name="EditStates">
								<VisualState x:Name="Editable" />
								<VisualState x:Name="Uneditable" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<ToggleButton x:Name="PART_ToggleButton" Template="{StaticResource ComboBoxToggleButton}" Style="{x:Null}" Grid.Column="2" Focusable="False" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
						<ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,3,30,3" />
						<!--<TextBox x:Name="PART_EditableTextBox"  
                                 HorizontalAlignment="Left"
                                 Margin="2,3,30,3"
                                 Focusable="True"
                                 Background="Transparent" 
                                 Visibility="Hidden"  
                                 Text="{TemplateBinding ComboBox.SelectionBoxItem}"
                                 Template="{StaticResource ComboBoxTextBox}"
                                 IsReadOnly="{TemplateBinding IsReadOnly}" />-->
						<TextBox x:Name="PART_EditableTextBox" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="3,3,30,3" Focusable="True" Background="Transparent" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}" />
						<!--SelectionBrush="{DynamicResource PrimaryNormalSolidColorBrush}"/>-->
						<Popup x:Name="PART_Popup" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" StaysOpen="False">
							<Grid x:Name="PART_DropDown" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" Margin="24,2,24,24" MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}" RenderTransformOrigin=".5,0" SnapsToDevicePixels="True">
								<Grid.RenderTransform>
									<ScaleTransform ScaleY="0" />
								</Grid.RenderTransform>
								<Border Background="{DynamicResource BackgroundSolidColorBrush}" CornerRadius="{Binding Path=(helpers:ElementHelper.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True" UseLayoutRounding="True" Effect="{StaticResource PopupShadowDepth}" />
								<Border Name="PART_DropDownBorder" Background="{DynamicResource BackgroundSolidColorBrush}" BorderBrush="{DynamicResource BaseSolidColorBrush}" BorderThickness="1" CornerRadius="{Binding Path=(helpers:ElementHelper.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="True" UseLayoutRounding="True" />
								<ScrollViewer Padding="0,8" ScrollViewer.VerticalScrollBarVisibility="Auto">
									<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
								</ScrollViewer>
							</Grid>
						</Popup>
						<Border x:Name="PART_Border" CornerRadius="{Binding Path=(helpers:ElementHelper.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{DynamicResource BaseSolidColorBrush}" BorderThickness="1" SnapsToDevicePixels="True" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger SourceName="PART_ToggleButton" Property="IsChecked" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard x:Name="BeginStoryboardOpenStoryboard" Storyboard="{StaticResource OpenStoryboard}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<StopStoryboard BeginStoryboardName="BeginStoryboardOpenStoryboard" />
							</Trigger.ExitActions>
						</Trigger>
						<Trigger SourceName="PART_ToggleButton" Property="IsChecked" Value="False">
							<Trigger.EnterActions>
								<BeginStoryboard x:Name="BeginStoryboardCloseStoryboard" Storyboard="{StaticResource CloseStoryboard}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<StopStoryboard BeginStoryboardName="BeginStoryboardCloseStoryboard" />
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="HasItems" Value="False">
							<Setter TargetName="PART_DropDownBorder" Property="MinHeight" Value="95" />
						</Trigger>
						<Trigger Property="IsGrouping" Value="True">
							<Setter Property="ScrollViewer.CanContentScroll" Value="False" />
						</Trigger>
						<Trigger SourceName="PART_Popup" Property="AllowsTransparency" Value="True">
							<Setter TargetName="PART_DropDownBorder" Property="CornerRadius" Value="{Binding Path=(helpers:ElementHelper.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter TargetName="PART_DropDownBorder" Property="Margin" Value="0,2,0,0" />
						</Trigger>
						<Trigger Property="ComboBox.IsEditable" Value="True">
							<Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
							<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
							<Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Padding" Value="20,0" />
		<Setter Property="Height" Value="34" />
		<Setter Property="Margin" Value="1,0" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Grid>
						<!--<VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Unselected">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="PART_ContentPresenter" 
                                                        Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                                        EasingFunction="{StaticResource ExponentialEaseOut}"
                                                        To="{DynamicResource RegularTextColor}"
                                                        Duration="00:00:.1"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="PART_RectangleSelected" 
                                                        Storyboard.TargetProperty="(Rectangle.Fill).(SolidColorBrush.Color)"
                                                        EasingFunction="{StaticResource ExponentialEaseOut}"
                                                        To="{DynamicResource BaseColor}"
                                                        Duration="00:00:.3"/>
                                        <ColorAnimation Storyboard.TargetName="PART_ContentPresenter" 
                                                        Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)"
                                                        EasingFunction="{StaticResource ExponentialEaseOut}"
                                                        To="{DynamicResource PrimaryPressedColor}"
                                                        Duration="00:00:.1"/>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="SelectedUnfocused"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>-->
						<Rectangle x:Name="PART_RectangleMouseOver" Fill="{DynamicResource BackgroundSolidColorBrush}" SnapsToDevicePixels="True" UseLayoutRounding="True" />
						<Rectangle x:Name="PART_RectangleSelected" Fill="{DynamicResource BaseSolidColorBrush}" Visibility="Collapsed" SnapsToDevicePixels="True" UseLayoutRounding="True" />
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" x:Name="PART_ContentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.Foreground="{DynamicResource RegularTextSolidColorBrush}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="PART_RectangleMouseOver" Property="Fill" Value="{DynamicResource DefaultBackgroundSolidColorBrush}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_RectangleSelected" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="PART_ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
							<Setter TargetName="PART_ContentPresenter" Property="TextElement.FontWeight" Value="Bold" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True" />
								<Condition Property="IsMouseOver" Value="False" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
							<Setter TargetName="PART_RectangleSelected" Property="Visibility" Value="Visible" />
							<Setter TargetName="PART_ContentPresenter" Property="TextElement.FontWeight" Value="Bold" />
						</MultiTrigger>
						<Trigger Property="IsFocused" Value="True">
							<Setter TargetName="PART_RectangleMouseOver" Property="Fill" Value="{DynamicResource DefaultBackgroundSolidColorBrush}" />
						</Trigger>
						<!--<Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                        </Trigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource DefaultComboBox}" />
	<Style x:Key="DefaultToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="PART_Border" Width="40" Height="20" Background="{DynamicResource BaseSolidColorBrush}" CornerRadius="10">
						<Ellipse x:Name="PART_Ellipse" Width="16" Height="16" Margin="2,0" VerticalAlignment="Center" HorizontalAlignment="Left" Fill="{DynamicResource WindowForegroundColorBrush}">
							<Ellipse.RenderTransform>
								<TranslateTransform />
							</Ellipse.RenderTransform>
						</Ellipse>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" To="20" Duration="00:00:.3" EasingFunction="{StaticResource CubicEaseInOut}" />
										<!--<ColorAnimation Duration="00:00:0.3"
                                                        Storyboard.TargetName="PART_Border"
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                        To="{DynamicResource PrimaryNormalColor}"
                                                        EasingFunction="{StaticResource CubicEaseInOut}"/>-->
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked">
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" To="0" Duration="00:00:.3" EasingFunction="{StaticResource CubicEaseInOut}" />
										<!--<ColorAnimation Duration="00:00:0.3" 
                                                        Storyboard.TargetName="PART_Border"
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                        To="{DynamicResource BaseColor}"
                                                        EasingFunction="{StaticResource CubicEaseInOut}"/>-->
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Indeterminate" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="Background" TargetName="PART_Border" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource DefaultToggleButton}" />
	<Style TargetType="{x:Type CalendarDayButton}" x:Key="CalendarDayButtonStyle" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Width" Value="32" />
		<Setter Property="Height" Value="32" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CalendarDayButton">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" />
								</VisualStateGroup.Transitions>
								<VisualState Name="Normal" />
								<VisualState Name="MouseOver" />
								<VisualState Name="Pressed" />
								<VisualState Name="Disabled" />
							</VisualStateGroup>
							<VisualStateGroup Name="SelectionStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState Name="Unselected" />
								<VisualState Name="Selected" />
							</VisualStateGroup>
							<VisualStateGroup Name="CalendarButtonFocusStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState Name="CalendarButtonFocused" />
								<VisualState Name="CalendarButtonUnfocused" />
							</VisualStateGroup>
							<VisualStateGroup Name="ActiveStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState Name="Active" />
								<VisualState Name="Inactive" />
							</VisualStateGroup>
							<VisualStateGroup Name="DayStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState Name="RegularDay" />
								<VisualState Name="Today" />
							</VisualStateGroup>
							<VisualStateGroup Name="BlackoutDayStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState Name="NormalDay" />
								<VisualState Name="BlackoutDay" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Ellipse x:Name="SelectedBackground" Opacity="0">
							<Ellipse.Fill>
								<SolidColorBrush Color="{DynamicResource PrimaryMouseOverColor}" />
							</Ellipse.Fill>
						</Ellipse>
						<Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" />
						<Ellipse x:Name="DayButtonFocusVisual" Visibility="Collapsed" IsHitTestVisible="False">
							<Ellipse.Fill>
								<SolidColorBrush Color="{DynamicResource PrimaryNormalColor}" />
							</Ellipse.Fill>
						</Ellipse>
						<ContentPresenter x:Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<TextElement.Foreground>
								<SolidColorBrush Color="{DynamicResource RegularTextColor}" />
							</TextElement.Foreground>
						</ContentPresenter>
						<Path x:Name="Blackout" Opacity="0" Margin="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{DynamicResource WindowForegroundColorBrush}" Stretch="Fill" Data="{StaticResource PathBlackout}" />
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="NormalText" Property="TextElement.Foreground" Value="{DynamicResource PrimaryMouseOverSolidColorBrush}" />
						</MultiTrigger>
						<Trigger Property="IsToday" Value="True">
							<Setter TargetName="NormalText" Property="TextElement.FontWeight" Value="Bold" />
							<Setter TargetName="NormalText" Property="TextElement.Foreground" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="NormalText" Property="TextElement.Foreground" Value="{DynamicResource WindowForegroundColorBrush}" />
							<Setter TargetName="SelectedBackground" Property="Opacity" Value="1" />
						</Trigger>
						<Trigger Property="IsInactive" Value="True">
							<Setter TargetName="NormalText" Property="TextElement.Foreground" Value="{DynamicResource BaseSolidColorBrush}" />
						</Trigger>
						<Trigger Property="IsBlackedOut" Value="True">
							<Setter TargetName="Blackout" Property="Opacity" Value=".2" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type CalendarButton}" x:Key="CalendarButtonStyle" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="MinWidth" Value="48" />
		<Setter Property="MinHeight" Value="32" />
		<Setter Property="FontSize" Value="12" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CalendarButton">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" />
								</VisualStateGroup.Transitions>
								<VisualState Name="Normal" />
								<VisualState Name="MouseOver">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource PrimaryMouseOverColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState Name="Pressed" />
							</VisualStateGroup>
							<VisualStateGroup Name="SelectionStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState Name="Unselected" />
								<VisualState Name="Selected">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource PrimaryNormalColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup Name="ActiveStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState Name="Active" />
								<VisualState Name="Inactive" />
							</VisualStateGroup>
							<VisualStateGroup Name="CalendarButtonFocusStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" />
								</VisualStateGroup.Transitions>
								<VisualState Name="CalendarButtonFocused">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetName="NormalText" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
											<EasingColorKeyFrame KeyTime="0" Value="{DynamicResource PrimaryNormalColor}" />
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState Name="CalendarButtonUnfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<ContentPresenter x:Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="3,20">
							<TextElement.Foreground>
								<SolidColorBrush Color="{DynamicResource RegularTextColor}" />
							</TextElement.Foreground>
						</ContentPresenter>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsInactive" Value="True">
							<Setter TargetName="NormalText" Property="TextElement.Foreground" Value="{DynamicResource BaseSolidColorBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<ControlTemplate x:Key="PreviousButtonTemplate" TargetType="{x:Type Button}">
		<Grid Cursor="Hand">
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualState x:Name="Normal" />
					<VisualState x:Name="MouseOver">
						<Storyboard>
							<ColorAnimation Duration="0" Storyboard.TargetName="PART_Path" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{DynamicResource PrimaryMouseOverColor}" />
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="PART_Path" />
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<Grid Background="Transparent">
				<Path x:Name="PART_Path" Margin="14,-6,0,0" Stretch="Fill" HorizontalAlignment="Left" Height="10" VerticalAlignment="Center" Width="6" Data="{StaticResource PathPrevious}">
					<Path.Fill>
						<SolidColorBrush Color="{DynamicResource RegularTextColor}" />
					</Path.Fill>
				</Path>
			</Grid>
		</Grid>
	</ControlTemplate>
	<ControlTemplate x:Key="NextButtonTemplate" TargetType="{x:Type Button}">
		<Grid Cursor="Hand">
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualState x:Name="Normal" />
					<VisualState x:Name="MouseOver">
						<Storyboard>
							<ColorAnimation Duration="0" To="{StaticResource PrimaryMouseOverColor}" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="PART_Path" />
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="PART_Path" />
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<Grid Background="Transparent">
				<Path x:Name="PART_Path" Data="{StaticResource PathNext}" HorizontalAlignment="Right" Height="10" Margin="0,-6,14,0" Stretch="Fill" VerticalAlignment="Center" Width="6">
					<Path.Fill>
						<SolidColorBrush Color="{DynamicResource RegularTextColor}" />
					</Path.Fill>
				</Path>
			</Grid>
		</Grid>
	</ControlTemplate>
	<ControlTemplate x:Key="HeaderButtonTemplate" TargetType="{x:Type Button}">
		<Grid Cursor="Hand">
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualState x:Name="Normal" />
					<VisualState x:Name="MouseOver" />
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimation Duration="0" To=".5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_ButtonContent" />
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<ContentPresenter x:Name="PART_ButtonContent" Margin="1,4,1,9" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" TextElement.Foreground="{DynamicResource RegularTextSolidColorBrush}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
		</Grid>
	</ControlTemplate>
	<Style x:Key="CalendarItemStyle" TargetType="{x:Type CalendarItem}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Margin" Value="24,4,24,24" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CalendarItem}">
					<ControlTemplate.Resources>
						<DataTemplate x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}">
							<StackPanel>
								<TextBlock Foreground="{DynamicResource PrimaryTextSolidColorBrush}" FontSize="12" Margin="0,6" Text="{Binding}" HorizontalAlignment="Center" VerticalAlignment="Center" />
								<Rectangle Fill="{DynamicResource BaseSolidColorBrush}" Height="1" VerticalAlignment="Bottom" />
							</StackPanel>
						</DataTemplate>
					</ControlTemplate.Resources>
					<Grid x:Name="PART_Root" Margin="{TemplateBinding Margin}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_DisabledVisual" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border Background="{DynamicResource BackgroundSolidColorBrush}" BorderBrush="{DynamicResource BaseSolidColorBrush}" BorderThickness="1" CornerRadius="3" SnapsToDevicePixels="True" UseLayoutRounding="True">
							<Border.Effect>
								<DropShadowEffect BlurRadius="12" Opacity="0.1" ShadowDepth="2" Color="Black" />
							</Border.Effect>
							<Grid Margin="0,20,0,0">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition Height="*" />
								</Grid.RowDefinitions>
								<Button x:Name="PART_PreviousButton" Template="{StaticResource PreviousButtonTemplate}" Focusable="False" HorizontalAlignment="Left" Grid.Column="0" Grid.Row="0" Height="20" Width="28" />
								<Button x:Name="PART_HeaderButton" Focusable="False" FontSize="14" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="1" Grid.Row="0" Template="{StaticResource HeaderButtonTemplate}" />
								<Button x:Name="PART_NextButton" Focusable="False" HorizontalAlignment="Right" Grid.Column="2" Grid.Row="0" Template="{StaticResource NextButtonTemplate}" Height="20" Width="28" />
								<Grid x:Name="PART_MonthView" Visibility="Visible" Grid.ColumnSpan="3" Grid.Row="1" Margin="6,10" VerticalAlignment="Center" HorizontalAlignment="Center">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>
								</Grid>
								<Grid x:Name="PART_YearView" Visibility="Hidden" Grid.ColumnSpan="3" Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="6,-3,7,6">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>
								</Grid>
							</Grid>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding DisplayMode, &#xD;&#xA;              RelativeSource={RelativeSource FindAncestor, &#xD;&#xA;              AncestorType={x:Type Calendar}}}" Value="Year">
							<Setter Property="Visibility" TargetName="PART_MonthView" Value="Collapsed" />
							<Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
						</DataTrigger>
						<DataTrigger Binding="{Binding DisplayMode, &#xD;&#xA;              RelativeSource={RelativeSource FindAncestor, &#xD;&#xA;              AncestorType={x:Type Calendar}}}" Value="Decade">
							<Setter Property="Visibility" TargetName="PART_MonthView" Value="Collapsed" />
							<Setter Property="Visibility" TargetName="PART_YearView" Value="Visible" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultCalendar" TargetType="{x:Type Calendar}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="CalendarButtonStyle" Value="{StaticResource CalendarButtonStyle}" />
		<Setter Property="CalendarDayButtonStyle" Value="{StaticResource CalendarDayButtonStyle}" />
		<Setter Property="CalendarItemStyle" Value="{StaticResource CalendarItemStyle}" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextSolidColorBrush}" />
		<Setter Property="Background" Value="{DynamicResource BackgroundSolidColorBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Calendar}">
					<StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
						<CalendarItem x:Name="PART_CalendarItem" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Style="{TemplateBinding CalendarItemStyle}" />
					</StackPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DropDownButtonStyle" TargetType="Button" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="30" />
							<ColumnDefinition />
						</Grid.ColumnDefinitions>
						<Border x:Name="Border" Grid.ColumnSpan="2" BorderThickness="1" Background="{DynamicResource BackgroundSolidColorBrush}" />
						<Grid FlowDirection="LeftToRight" HorizontalAlignment="Center" Height="18" VerticalAlignment="Center" Width="19">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="20*" />
								<ColumnDefinition Width="20*" />
								<ColumnDefinition Width="20*" />
								<ColumnDefinition Width="20*" />
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="23*" />
								<RowDefinition Height="19*" />
								<RowDefinition Height="19*" />
								<RowDefinition Height="19*" />
							</Grid.RowDefinitions>
							<Border x:Name="Highlight" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius="0,0,1,1" Margin="-1" Opacity="1" Grid.Row="0" BorderBrush="{DynamicResource RegularTextSolidColorBrush}" Grid.RowSpan="4" />
							<Border x:Name="Background" BorderBrush="{DynamicResource RegularTextSolidColorBrush}" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius=".5" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3" Background="{DynamicResource BackgroundSolidColorBrush}" />
							<Border x:Name="BackgroundGradient" BorderBrush="{DynamicResource RegularTextSolidColorBrush}" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius=".5" Margin="0,-1,0,0" Opacity="1" Grid.Row="1" Grid.RowSpan="3" Background="{DynamicResource BackgroundSolidColorBrush}" />
							<Rectangle Grid.ColumnSpan="4" Grid.RowSpan="1" StrokeThickness="1" Fill="{DynamicResource RegularTextSolidColorBrush}" Stroke="{DynamicResource RegularTextSolidColorBrush}" />
							<Path Fill="{DynamicResource RegularTextSolidColorBrush}" Grid.Row="1" Grid.Column="0" Grid.RowSpan="3" Grid.ColumnSpan="4" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5" Margin="4,3,4,3" Stretch="Fill" Data="{StaticResource PathDatePickerDropDown}" />
							<Ellipse Grid.ColumnSpan="4" Fill="{DynamicResource BackgroundSolidColorBrush}" HorizontalAlignment="Center" Height="3" StrokeThickness="0" VerticalAlignment="Center" Width="3" />
							<Border x:Name="DisabledVisual" BorderBrush="{DynamicResource BackgroundSolidColorBrush}" BorderThickness="1" Grid.ColumnSpan="4" CornerRadius="0,0,.5,.5" Opacity="0" Grid.Row="0" Grid.RowSpan="4" />
						</Grid>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultDatePickerTextBox" TargetType="{x:Type DatePickerTextBox}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
		<!--<Setter Property="SelectionBrush" Value="{DynamicResource PrimaryNormalSolidColorBrush}"/>-->
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="DatePickerTextBox">
					<Grid>
						<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="1" Opacity="1">
							<Grid x:Name="WatermarkContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{x:Null}">
								<ScrollViewer x:Name="PART_ContentHost" Margin="0" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Grid>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type Calendar}" BasedOn="{StaticResource DefaultCalendar}" />
	<Style TargetType="{x:Type DatePickerTextBox}" BasedOn="{StaticResource DefaultDatePickerTextBox}" />
	<Style x:Key="DefaultDataGridSelectAllButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="BorderThickness" Value="0,0,0,1" />
		<Setter Property="BorderBrush" Value="{DynamicResource BaseSolidColorBrush}" />
		<Setter Property="Background" Value="{DynamicResource BackgroundSolidColorBrush}" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver" />
								<VisualState x:Name="Pressed" />
								<VisualState x:Name="Disabled" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Polygon x:Name="Arrow" Margin="0,2,0,0" Points="0,10 10,10 10,0" Stretch="Uniform" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
							<Polygon.Fill>
								<SolidColorBrush Color="{DynamicResource PrimaryTextColor}" />
							</Polygon.Fill>
						</Polygon>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" Value="{DynamicResource PrimaryMouseOverSolidColorBrush}" TargetName="Arrow" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultDataGrid" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextSolidColorBrush}" />
		<Setter Property="BorderThickness" Value="1,1,1,0" />
		<Setter Property="BorderBrush" Value="{DynamicResource BaseSolidColorBrush}" />
		<Setter Property="Background" Value="{x:Null}" />
		<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
		<Setter Property="HorizontalGridLinesBrush" Value="{x:Null}" />
		<Setter Property="VerticalGridLinesBrush" Value="{x:Null}" />
		<Setter Property="MinRowHeight" Value="{DynamicResource MinDataGridRowHeight}" />
		<Setter Property="CanUserAddRows" Value="False" />
		<Setter Property="AutoGenerateColumns" Value="False" />
		<Setter Property="RowHeaderWidth" Value="0" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGrid}">
					<Border x:Name="DGR_Border" SnapsToDevicePixels="True" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Disabled" />
								<VisualState x:Name="Normal" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<ScrollViewer x:Name="DG_ScrollViewer" Focusable="False">
							<ScrollViewer.Template>
								<ControlTemplate TargetType="{x:Type ScrollViewer}">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="*" />
										</Grid.ColumnDefinitions>
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" />
											<RowDefinition Height="*" />
											<RowDefinition Height="Auto" />
										</Grid.RowDefinitions>
										<Button Focusable="False" Command="{x:Static DataGrid.SelectAllCommand}" Style="{StaticResource DefaultDataGridSelectAllButtonStyle}" Visibility="{Binding HeadersVisibility, &#xD;&#xA;                      ConverterParameter={x:Static DataGridHeadersVisibility.All}, &#xD;&#xA;                      Converter={x:Static DataGrid.HeadersVisibilityConverter}, &#xD;&#xA;                      RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType=DataGrid},Converter={StaticResource DoubleMinConverter}}" />
										<DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, &#xD;&#xA;                      ConverterParameter={x:Static DataGridHeadersVisibility.Column}, &#xD;&#xA;                      Converter={x:Static DataGrid.HeadersVisibilityConverter}, &#xD;&#xA;                      RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
										<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.ColumnSpan="2" Grid.Row="1" CanContentScroll="{TemplateBinding CanContentScroll}" />
										<ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="1" HorizontalAlignment="Right" Grid.Row="1" Orientation="Vertical" ViewportSize="{TemplateBinding ViewportHeight}" Maximum="{TemplateBinding ScrollableHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, &#xD;&#xA;                      RelativeSource={RelativeSource TemplatedParent}}" />
										<Grid Grid.Column="1" Grid.Row="2">
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, &#xD;&#xA;                          RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
												<ColumnDefinition Width="*" />
											</Grid.ColumnDefinitions>
											<ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Orientation="Horizontal" ViewportSize="{TemplateBinding ViewportWidth}" Maximum="{TemplateBinding ScrollableWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, &#xD;&#xA;                        RelativeSource={RelativeSource TemplatedParent}}" />
										</Grid>
									</Grid>
								</ControlTemplate>
							</ScrollViewer.Template>
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsGrouping" Value="True">
				<Setter Property="ScrollViewer.CanContentScroll" Value="False" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="DefaultDataGridCell" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridCell}">
					<Border x:Name="PART_Border" BorderBrush="{x:Null}" BorderThickness="{TemplateBinding BorderThickness}" Background="{x:Null}" SnapsToDevicePixels="True">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Unfocused" />
								<VisualState x:Name="Focused" />
							</VisualStateGroup>
							<VisualStateGroup x:Name="CurrentStates">
								<VisualState x:Name="Regular" />
								<VisualState x:Name="Current" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="True" />
					<Condition Property="Selector.IsSelectionActive" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Foreground" Value="{DynamicResource PrimaryTextSolidColorBrush}" />
				<Setter Property="Background" Value="{DynamicResource BaseSolidColorBrush}" />
			</MultiTrigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="DefaultDataGridRow" TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
		<Setter Property="BorderThickness" Value="0,0,0,1" />
		<Setter Property="BorderBrush" Value="{DynamicResource BaseSolidColorBrush}" />
		<Setter Property="Background" Value="{DynamicResource BackgroundColor}" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="ValidationErrorTemplate">
			<Setter.Value>
				<ControlTemplate>
					<TextBlock Foreground="{DynamicResource DangerPressedSolidColorBrush}" Margin="2,0,0,0" Text="!" VerticalAlignment="Center" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridRow}">
					<Border x:Name="DGR_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
						<Border.Background>
							<SolidColorBrush Color="{Binding RelativeSource={RelativeSource AncestorType=DataGridRow},Path=Background}" />
						</Border.Background>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Normal_AlternatingRow" />
								<VisualState x:Name="Normal_Selected" />
								<VisualState x:Name="Unfocused_Selected" />
								<VisualState x:Name="Normal_Editing" />
								<VisualState x:Name="MouseOver_Editing">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" To="{DynamicResource DefaultBackgroundColor}" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="MouseOver_Unfocused_Editing" />
								<VisualState x:Name="Unfocused_Editing" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="DGR_Border" Duration="0:0:0.2" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" To="{DynamicResource BaseMoveColor}" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="MouseOver_Selected">
									<Storyboard>
										<ColorAnimation Storyboard.TargetName="DGR_Border" Duration="0:0:0.2" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" To="{DynamicResource BaseMoveColor}" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="MouseOver_Unfocused_Selected" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<SelectiveScrollingGrid>
							<SelectiveScrollingGrid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
							</SelectiveScrollingGrid.ColumnDefinitions>
							<SelectiveScrollingGrid.RowDefinitions>
								<RowDefinition Height="*" />
								<RowDefinition Height="Auto" />
							</SelectiveScrollingGrid.RowDefinitions>
							<DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							<DataGridDetailsPresenter Grid.Column="1" Grid.Row="1" Visibility="{TemplateBinding DetailsVisibility}" SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, &#xD;&#xA;                ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical},&#xD;&#xA;                Converter={x:Static DataGrid.RowDetailsScrollingConverter}, &#xD;&#xA;                RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
							<DataGridRowHeader Grid.RowSpan="2" SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Visibility="{Binding HeadersVisibility, &#xD;&#xA;                ConverterParameter={x:Static DataGridHeadersVisibility.Row}, &#xD;&#xA;                Converter={x:Static DataGrid.HeadersVisibilityConverter}, &#xD;&#xA;                RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
						</SelectiveScrollingGrid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Height" Value="8" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Cursor" Value="SizeNS" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultDataGridRowHeader" TargetType="{x:Type DataGridRowHeader}">
		<Setter Property="FontWeight" Value="ExtraBlack" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridRowHeader}">
					<Grid HorizontalAlignment="Center">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Normal_CurrentRow" />
								<VisualState x:Name="Unfocused_EditingRow" />
								<VisualState x:Name="Normal_EditingRow" />
								<VisualState x:Name="MouseOver" />
								<VisualState x:Name="MouseOver_CurrentRow" />
								<VisualState x:Name="MouseOver_Unfocused_EditingRow" />
								<VisualState x:Name="MouseOver_EditingRow" />
								<VisualState x:Name="MouseOver_Unfocused_Selected" />
								<VisualState x:Name="MouseOver_Selected" />
								<VisualState x:Name="MouseOver_Unfocused_CurrentRow_Selected" />
								<VisualState x:Name="MouseOver_CurrentRow_Selected" />
								<VisualState x:Name="Unfocused_Selected" />
								<VisualState x:Name="Unfocused_CurrentRow_Selected" />
								<VisualState x:Name="Normal_CurrentRow_Selected" />
								<VisualState x:Name="Normal_Selected" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="rowHeaderBorder" Background="{TemplateBinding Background}">
							<StackPanel Orientation="Horizontal">
								<ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextElement.FontWeight="{TemplateBinding FontWeight}" />
								<Control SnapsToDevicePixels="false" Template="{Binding ValidationErrorTemplate, &#xD;&#xA;                  RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" Visibility="{Binding (Validation.HasError), &#xD;&#xA;                  Converter={StaticResource bool2VisibilityConverter}, &#xD;&#xA;                  RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" />
							</StackPanel>
						</Border>
						<Thumb x:Name="PART_TopHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}" VerticalAlignment="Top" />
						<Thumb x:Name="PART_BottomHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}" VerticalAlignment="Bottom" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Width" Value="8" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Cursor" Value="SizeWE" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" Width="{TemplateBinding Width}" />
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource BaseSolidColorBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultDataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="FontWeight" Value="ExtraBlack" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="{DynamicResource BackgroundSolidColorBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BaseSolidColorBrush}" />
		<Setter Property="BorderThickness" Value="0,0,0,1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="StoryboardAscending">
							<DoubleAnimation Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="SortArrow" Duration="00:00:.2" To="180" />
						</Storyboard>
						<Storyboard x:Key="StoryboardDescending">
							<DoubleAnimation Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="SortArrow" Duration="00:00:.2" To="0" />
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Border x:Name="columnHeaderBorder" Background="{TemplateBinding Background}" Padding="10" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
							<Grid Name="HedearGrid">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.FontWeight="{TemplateBinding FontWeight}" TextElement.Foreground="{TemplateBinding Foreground}" />
								<Path x:Name="SortArrow" Visibility="Collapsed" Data="{StaticResource PathSortArrow}" Stretch="Fill" Grid.Column="1" Width="10" Height="10" Fill="{DynamicResource PrimaryPressedSolidColorBrush}" Margin="4,0,0,0" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
									<Path.RenderTransform>
										<RotateTransform />
									</Path.RenderTransform>
								</Path>
							</Grid>
						</Border>
						<Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}" />
						<Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="SortDirection" Value="Ascending">
							<Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
							<Trigger.ExitActions>
								<StopStoryboard BeginStoryboardName="StoryboardAscendingBeginStoryboard" />
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard x:Name="StoryboardAscendingBeginStoryboard" Storyboard="{StaticResource StoryboardAscending}" />
							</Trigger.EnterActions>
						</Trigger>
						<Trigger Property="SortDirection" Value="Descending">
							<Setter TargetName="SortArrow" Property="Visibility" Value="Visible" />
							<Trigger.ExitActions>
								<StopStoryboard BeginStoryboardName="StoryboardDescendingBeginStoryboard" />
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard x:Name="StoryboardDescendingBeginStoryboard" Storyboard="{StaticResource StoryboardDescending}" />
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultDataGridColumnHeadersPresenter" TargetType="{x:Type DataGridColumnHeadersPresenter}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
					<Grid>
						<DataGridColumnHeader x:Name="PART_FillerColumnHeader" IsHitTestVisible="False" />
						<ItemsPresenter />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type DataGridColumnHeadersPresenter}" BasedOn="{StaticResource DefaultDataGridColumnHeadersPresenter}" />
	<Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource DefaultDataGridColumnHeader}" />
	<Style TargetType="{x:Type DataGridRowHeader}" BasedOn="{StaticResource DefaultDataGridRowHeader}" />
	<Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource DefaultDataGridRow}" />
	<Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource DefaultDataGridCell}" />
	<Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource DefaultDataGrid}" />
	<Style x:Key="BaseTAndBTabItem" TargetType="{x:Type TabItem}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="MinHeight" Value="48" />
		<Setter Property="MinWidth" Value="100" />
		<Setter Property="BorderThickness" Value="{StaticResource BorderThickness}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid Background="{TemplateBinding Background}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="SelectionStates">
								<VisualState x:Name="Unselected" />
								<VisualState x:Name="Selected">
									<Storyboard>
										<DoubleAnimation Duration="00:00:.2" To="1" Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(Border.RenderTransform).(ScaleTransform.ScaleX)" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver" />
								<VisualState x:Name="Disabled" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="PART_Border" BorderThickness="{TemplateBinding BorderThickness}" RenderTransformOrigin=".5,.5">
							<Border.RenderTransform>
								<ScaleTransform ScaleX="0" ScaleY="1" />
							</Border.RenderTransform>
						</Border>
						<ContentPresenter ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Center" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
							<Setter Property="Background" Value="{DynamicResource DefaultBackgroundSolidColorBrush}" />
							<Setter Property="Foreground" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Foreground" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="BaseLAndRTabItem" TargetType="{x:Type TabItem}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="MinHeight" Value="48" />
		<Setter Property="MinWidth" Value="100" />
		<Setter Property="BorderThickness" Value="{StaticResource BorderThickness}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid Background="{TemplateBinding Background}">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="SelectionStates">
								<VisualState x:Name="Unselected" />
								<VisualState x:Name="Selected">
									<Storyboard>
										<DoubleAnimation Duration="00:00:.2" To="1" Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(Border.RenderTransform).(ScaleTransform.ScaleY)" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver" />
								<VisualState x:Name="Disabled" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="PART_Border" BorderThickness="{TemplateBinding BorderThickness}" RenderTransformOrigin=".5,.5">
							<Border.RenderTransform>
								<ScaleTransform ScaleX="1" ScaleY="0" />
							</Border.RenderTransform>
						</Border>
						<ContentPresenter ContentSource="Header" VerticalAlignment="Center" HorizontalAlignment="Center" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="PART_Border" Property="BorderBrush" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
							<Setter Property="Background" Value="{DynamicResource DefaultBackgroundSolidColorBrush}" />
							<Setter Property="Foreground" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Foreground" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="LeftTabItem" TargetType="{x:Type TabItem}" BasedOn="{StaticResource BaseLAndRTabItem}">
		<Setter Property="BorderThickness" Value="0,0,2,0" />
	</Style>
	<Style x:Key="RightTabItem" TargetType="{x:Type TabItem}" BasedOn="{StaticResource BaseLAndRTabItem}">
		<Setter Property="BorderThickness" Value="2,0,0,0" />
	</Style>
	<Style x:Key="TopTabItem" TargetType="{x:Type TabItem}" BasedOn="{StaticResource BaseTAndBTabItem}">
		<Setter Property="BorderThickness" Value="0,0,0,2" />
	</Style>
	<Style x:Key="BottomTabItem" TargetType="{x:Type TabItem}" BasedOn="{StaticResource BaseTAndBTabItem}">
		<Setter Property="BorderThickness" Value="0,2,0,0" />
	</Style>
	<Style x:Key="DefaultTabControl" TargetType="{x:Type TabControl}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="TabStripPlacement" Value="Top" />
		<!--<Setter Property="Margin" Value="2" />-->
		<!--<Setter Property="Padding" Value="2"/>-->
		<Setter Property="Background" Value="{DynamicResource BackgroundSolidColorBrush}" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource TopTabItem}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Name="ColumnDefinition0" />
							<ColumnDefinition Width="0" Name="ColumnDefinition1" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" Name="RowDefinition0" />
							<RowDefinition Height="*" Name="RowDefinition1" />
						</Grid.RowDefinitions>
						<Border x:Name="HeaderBorder" BorderBrush="{DynamicResource BaseSolidColorBrush}" BorderThickness="0,0,0,1" Grid.Row="0" Background="{DynamicResource BackgroundSolidColorBrush}">
							<TabPanel IsItemsHost="True" Name="HeaderPanel" Panel.ZIndex="1" KeyboardNavigation.TabIndex="1" />
						</Border>
						<Grid Name="ContentPanel" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Column="0" Grid.Row="1">
							<Border>
								<ContentPresenter Content="{TemplateBinding SelectedContent}" ContentTemplate="{TemplateBinding SelectedContentTemplate}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Name="PART_SelectedContentHost" Margin="2" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
							</Border>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
							<Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*" />
							<Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto" />
							<Setter TargetName="HeaderBorder" Property="Grid.Row" Value="1" />
							<Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="HeaderBorder" Property="BorderThickness" Value="0,1,0,0" />
							<Setter Property="ItemContainerStyle" Value="{StaticResource BottomTabItem}" />
						</Trigger>
						<Trigger Property="TabControl.TabStripPlacement" Value="Left">
							<Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="ContentPanel" Property="Grid.Column" Value="1" />
							<Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto" />
							<Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*" />
							<Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*" />
							<Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0" />
							<Setter TargetName="HeaderBorder" Property="BorderThickness" Value="0,0,1,0" />
							<Setter Property="ItemContainerStyle" Value="{StaticResource LeftTabItem}" />
						</Trigger>
						<Trigger Property="TabControl.TabStripPlacement" Value="Right">
							<Setter TargetName="ContentPanel" Property="Grid.Row" Value="0" />
							<Setter TargetName="HeaderBorder" Property="Grid.Column" Value="1" />
							<Setter TargetName="ContentPanel" Property="Grid.Column" Value="0" />
							<Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*" />
							<Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto" />
							<Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*" />
							<Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0" />
							<Setter TargetName="HeaderBorder" Property="BorderThickness" Value="1,0,0,0" />
							<Setter Property="ItemContainerStyle" Value="{StaticResource RightTabItem}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource DefaultTabControl}" />
	<Style x:Key="DefaultPasswordBox" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="PasswordChar" Value="●" />
		<Setter Property="MinHeight" Value="{StaticResource MinHeight}" />
		<Setter Property="MinWidth" Value="180" />
		<Setter Property="AllowDrop" Value="True" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Padding" Value="6,0" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="helpers:PasswordBoxHelper.IsMonitoring" Value="True" />
		<Setter Property="SelectionBrush" Value="{DynamicResource WindowBorderBrushSolidColorBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type PasswordBox}">
					<Border x:Name="PART_Border" CornerRadius="{Binding Path=(helpers:ElementHelper.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" BorderThickness="{TemplateBinding BorderThickness}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" BorderBrush="{DynamicResource BaseSolidColorBrush}">
						<Border.Background>
							<SolidColorBrush Color="{DynamicResource BackgroundColor}" />
						</Border.Background>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="Disabled" />
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimation Duration="00:00:0.3" Storyboard.TargetName="PART_Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" To="{DynamicResource PrimaryNormalColor}" />
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid Margin="{TemplateBinding Padding}">
							<TextBlock x:Name="PART_TextBlockWatermark" Text="{Binding Path=(helpers:ElementHelper.Watermark),RelativeSource={RelativeSource TemplatedParent}}" Foreground="{DynamicResource RegularTextSolidColorBrush}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FontSize="{StaticResource NormalFontSize}" Margin="7.5,0" Visibility="Collapsed" />
							<ScrollViewer x:Name="PART_ContentHost" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="helpers:PasswordBoxHelper.PasswordLength" Value="0" />
								<Condition Property="helpers:ElementHelper.IsWatermark" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Visibility" TargetName="PART_TextBlockWatermark" Value="Visible" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource DefaultPasswordBox}" />
	<Style x:Key="DefaultExpander" TargetType="{x:Type Expander}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Background" Value="{DynamicResource BackgroundSolidColorBrush}" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />
		<Setter Property="BorderBrush" Value="{DynamicResource LighterSolidColorBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Expander}">
					<Border Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<DockPanel>
							<ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
								<ToggleButton.Style>
									<Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ControlBasicStyle}">
										<Setter Property="Cursor" Value="Hand" />
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type ToggleButton}">
													<Border Padding="2,10" BorderThickness="1" BorderBrush="{DynamicResource BaseSolidColorBrush}" Background="{DynamicResource LighterSolidColorBrush}">
														<VisualStateManager.VisualStateGroups>
															<VisualStateGroup x:Name="CheckStates">
																<VisualState x:Name="Checked">
																	<Storyboard>
																		<DoubleAnimation Duration="00:00:.2" To="90" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="ExpandededArrow" />
																	</Storyboard>
																</VisualState>
																<VisualState x:Name="Unchecked">
																	<Storyboard>
																		<DoubleAnimation Duration="00:00:.2" To="0" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="ExpandededArrow" />
																	</Storyboard>
																</VisualState>
																<VisualState x:Name="Indeterminate" />
															</VisualStateGroup>
														</VisualStateManager.VisualStateGroups>
														<Grid Background="Transparent" SnapsToDevicePixels="False" Margin="{TemplateBinding Padding}">
															<Grid.ColumnDefinitions>
																<ColumnDefinition Width="19" />
																<ColumnDefinition Width="*" />
															</Grid.ColumnDefinitions>
															<Path x:Name="ExpandededArrow" Stretch="Fill" Height="10" Width="6" Data="{StaticResource PathNext}" RenderTransformOrigin=".5,.5">
																<Path.Fill>
																	<SolidColorBrush Color="{DynamicResource PrimaryTextColor}" />
																</Path.Fill>
																<Path.RenderTransform>
																	<RotateTransform />
																</Path.RenderTransform>
															</Path>
															<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center" />
														</Grid>
													</Border>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</ToggleButton.Style>
							</ToggleButton>
							<Border x:Name="PART_Content" DockPanel.Dock="Bottom" BorderBrush="{DynamicResource BaseSolidColorBrush}" BorderThickness="0" SnapsToDevicePixels="True">
								<ContentPresenter x:Name="ExpandSite" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Border>
						</DockPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="True">
							<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Right">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right" />
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left" />
							<Setter Property="Style" TargetName="HeaderSite">
								<Setter.Value>
									<Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ControlBasicStyle}">
										<Setter Property="Cursor" Value="Hand" />
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type ToggleButton}">
													<Border Padding="10,2" BorderThickness="1" BorderBrush="{DynamicResource BaseSolidColorBrush}" Background="{DynamicResource LighterSolidColorBrush}">
														<VisualStateManager.VisualStateGroups>
															<VisualStateGroup x:Name="CheckStates">
																<VisualState x:Name="Checked">
																	<Storyboard>
																		<DoubleAnimation Duration="00:00:.2" To="-90" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="ExpandededArrow" />
																	</Storyboard>
																</VisualState>
																<VisualState x:Name="Unchecked">
																	<Storyboard>
																		<DoubleAnimation Duration="00:00:.2" To="0" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="ExpandededArrow" />
																	</Storyboard>
																</VisualState>
																<VisualState x:Name="Indeterminate" />
															</VisualStateGroup>
														</VisualStateManager.VisualStateGroups>
														<Grid Background="Transparent" SnapsToDevicePixels="False" Margin="{TemplateBinding Padding}">
															<Grid.RowDefinitions>
																<RowDefinition Height="19" />
																<RowDefinition Height="*" />
															</Grid.RowDefinitions>
															<Grid>
																<Grid.LayoutTransform>
																	<TransformGroup>
																		<RotateTransform Angle="90" />
																	</TransformGroup>
																</Grid.LayoutTransform>
																<Path x:Name="ExpandededArrow" Stretch="Fill" Height="10" Width="6" Data="{StaticResource PathNext}" RenderTransformOrigin=".5,.5">
																	<Path.Fill>
																		<SolidColorBrush Color="{DynamicResource PrimaryTextColor}" />
																	</Path.Fill>
																	<Path.RenderTransform>
																		<RotateTransform />
																	</Path.RenderTransform>
																</Path>
															</Grid>
															<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top" />
														</Grid>
													</Border>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Up">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top" />
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom" />
							<Setter Property="Style" TargetName="HeaderSite">
								<Setter.Value>
									<Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ControlBasicStyle}">
										<Setter Property="Cursor" Value="Hand" />
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type ToggleButton}">
													<Border Padding="2,10" BorderThickness="1" BorderBrush="{DynamicResource BaseSolidColorBrush}" Background="{DynamicResource LighterSolidColorBrush}">
														<VisualStateManager.VisualStateGroups>
															<VisualStateGroup x:Name="CheckStates">
																<VisualState x:Name="Checked">
																	<Storyboard>
																		<DoubleAnimation Duration="00:00:.2" To="-90" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="ExpandededArrow" />
																	</Storyboard>
																</VisualState>
																<VisualState x:Name="Unchecked">
																	<Storyboard>
																		<DoubleAnimation Duration="00:00:.2" To="0" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="ExpandededArrow" />
																	</Storyboard>
																</VisualState>
																<VisualState x:Name="Indeterminate" />
															</VisualStateGroup>
														</VisualStateManager.VisualStateGroups>
														<Grid Background="Transparent" SnapsToDevicePixels="False" Margin="{TemplateBinding Padding}">
															<Grid.ColumnDefinitions>
																<ColumnDefinition Width="19" />
																<ColumnDefinition Width="*" />
															</Grid.ColumnDefinitions>
															<Grid>
																<Path x:Name="ExpandededArrow" Stretch="Fill" Height="10" Width="6" Data="{StaticResource PathNext}" RenderTransformOrigin=".5,.5">
																	<Path.Fill>
																		<SolidColorBrush Color="{DynamicResource PrimaryTextColor}" />
																	</Path.Fill>
																	<Path.RenderTransform>
																		<RotateTransform />
																	</Path.RenderTransform>
																</Path>
															</Grid>
															<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center" />
														</Grid>
													</Border>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="ExpandDirection" Value="Left">
							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left" />
							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right" />
							<Setter Property="Style" TargetName="HeaderSite">
								<Setter.Value>
									<Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ControlBasicStyle}">
										<Setter Property="Cursor" Value="Hand" />
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type ToggleButton}">
													<Border Padding="10,2" BorderThickness="1" BorderBrush="{DynamicResource BaseSolidColorBrush}" Background="{DynamicResource LighterSolidColorBrush}">
														<VisualStateManager.VisualStateGroups>
															<VisualStateGroup x:Name="CheckStates">
																<VisualState x:Name="Checked">
																	<Storyboard>
																		<DoubleAnimation Duration="00:00:.2" To="90" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="ExpandededArrow" />
																	</Storyboard>
																</VisualState>
																<VisualState x:Name="Unchecked">
																	<Storyboard>
																		<DoubleAnimation Duration="00:00:.2" To="0" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="ExpandededArrow" />
																	</Storyboard>
																</VisualState>
																<VisualState x:Name="Indeterminate" />
															</VisualStateGroup>
														</VisualStateManager.VisualStateGroups>
														<Grid Background="Transparent" SnapsToDevicePixels="False" Margin="{TemplateBinding Padding}">
															<Grid.RowDefinitions>
																<RowDefinition Height="19" />
																<RowDefinition Height="*" />
															</Grid.RowDefinitions>
															<Grid>
																<Grid.LayoutTransform>
																	<TransformGroup>
																		<RotateTransform Angle="90" />
																	</TransformGroup>
																</Grid.LayoutTransform>
																<Path x:Name="ExpandededArrow" Stretch="Fill" Height="10" Width="6" Data="{StaticResource PathNext}" RenderTransformOrigin=".5,.5">
																	<Path.Fill>
																		<SolidColorBrush Color="{DynamicResource PrimaryTextColor}" />
																	</Path.Fill>
																	<Path.RenderTransform>
																		<RotateTransform />
																	</Path.RenderTransform>
																</Path>
															</Grid>
															<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top" />
														</Grid>
													</Border>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</Setter.Value>
							</Setter>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsExpanded" Value="True" />
								<Condition Property="ExpandDirection" Value="Down" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Content" Property="BorderThickness" Value="1,0,1,1" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsExpanded" Value="True" />
								<Condition Property="ExpandDirection" Value="Right" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Content" Property="BorderThickness" Value="0,1,1,1" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsExpanded" Value="True" />
								<Condition Property="ExpandDirection" Value="Up" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Content" Property="BorderThickness" Value="1,1,1,0" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsExpanded" Value="True" />
								<Condition Property="ExpandDirection" Value="Left" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Content" Property="BorderThickness" Value="1,1,0,1" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type Expander}" BasedOn="{StaticResource DefaultExpander}" />
	<Style x:Key="DefaultGroupBox" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GroupBox}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>
						<Border Grid.Row="0" BorderThickness="1" BorderBrush="{DynamicResource BaseSolidColorBrush}">
							<Border.Background>
								<SolidColorBrush Color="{DynamicResource BackgroundColor}" />
							</Border.Background>
							<ContentPresenter Margin="10" ContentSource="Header" RecognizesAccessKey="True" />
						</Border>
						<Border Grid.Row="1" BorderThickness="1,0,1,1" SnapsToDevicePixels="True" BorderBrush="{DynamicResource BaseSolidColorBrush}">
							<Border.Background>
								<SolidColorBrush Color="{DynamicResource BackgroundColor}" />
							</Border.Background>
							<ContentPresenter Margin="4" />
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource DefaultGroupBox}" />
	<Style x:Key="DefaultListBox" TargetType="{x:Type ListBox}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Setter Property="MinWidth" Value="120" />
		<Setter Property="MinHeight" Value="95" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Border Name="Border" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource BaseSolidColorBrush}">
						<ScrollViewer Focusable="False">
							<VirtualizingStackPanel IsItemsHost="True" />
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsGrouping" Value="True">
							<Setter Property="ScrollViewer.CanContentScroll" Value="False" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultListBoxItem" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextSolidColorBrush}" />
		<Setter Property="MinHeight" Value="48" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListBoxItem">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="SelectionStates">
								<VisualState x:Name="Unselected" />
								<VisualState x:Name="Selected">
									<!--<Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_Rectangle" Duration="0:0:0.5"
Storyboard.TargetProperty="(Rectangle.RenderTransform).(ScaleTransform.ScaleX)" To="1"
FillBehavior="Stop"/>
                                    </Storyboard>-->
								</VisualState>
								<VisualState x:Name="SelectedUnfocused" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="PART_Border" Padding="2" SnapsToDevicePixels="True" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource BaseSolidColorBrush}">
							<Border.Background>
								<SolidColorBrush Color="{DynamicResource WhiteColor}" />
							</Border.Background>
							<ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
						</Border>
						<!--<Rectangle x:Name="PART_Rectangle" Height="2" VerticalAlignment="Bottom"
Fill="{DynamicResource PrimaryNormalSolidColorBrush}"
RenderTransformOrigin=".5,.5">
                            <Rectangle.RenderTransform>
                                <ScaleTransform ScaleX="0" ScaleY="1"/>
                            </Rectangle.RenderTransform>
                        </Rectangle>-->
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="False" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Border" Property="Background" Value="{DynamicResource BaseMoveColorSolidColorBrush}" />
						</MultiTrigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="Background" Value="{DynamicResource BaseSolidColorBrush}" TargetName="PART_Border" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource DefaultListBox}" />
	<Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource DefaultListBoxItem}" />
	<Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid Background="{TemplateBinding Background}">
						<Grid.RowDefinitions>
							<RowDefinition Height="*" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<DockPanel Margin="{TemplateBinding Padding}">
							<ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Focusable="False">
								<GridViewHeaderRowPresenter Columns="{Binding Path=TemplatedParent.View.Columns,&#xD;&#xA;                RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContainerStyle="{Binding&#xD;&#xA;                Path=TemplatedParent.View.ColumnHeaderContainerStyle,&#xD;&#xA;                RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding&#xD;&#xA;                Path=TemplatedParent.View.ColumnHeaderTemplate,&#xD;&#xA;                RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplateSelector="{Binding &#xD;&#xA;                Path=TemplatedParent.View.ColumnHeaderTemplateSelector,&#xD;&#xA;                RelativeSource={RelativeSource TemplatedParent}}" AllowsColumnReorder="{Binding&#xD;&#xA;                Path=TemplatedParent.View.AllowsColumnReorder,&#xD;&#xA;                RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding&#xD;&#xA;                Path=TemplatedParent.View.ColumnHeaderContextMenu,&#xD;&#xA;                RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding&#xD;&#xA;                Path=TemplatedParent.View.ColumnHeaderToolTip,&#xD;&#xA;                RelativeSource={RelativeSource TemplatedParent}}" SnapsToDevicePixels="{TemplateBinding&#xD;&#xA;                SnapsToDevicePixels}" />
							</ScrollViewer>
							<ScrollContentPresenter Name="PART_ScrollContentPresenter" KeyboardNavigation.DirectionalNavigation="Local" CanContentScroll="True" CanHorizontallyScroll="False" CanVerticallyScroll="False" />
						</DockPanel>
						<ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Value="{TemplateBinding HorizontalOffset}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
						<ScrollBar Name="PART_VerticalScrollBar" HorizontalAlignment="Right" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Value="{TemplateBinding VerticalOffset}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Width" Value="18" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Padding="{TemplateBinding Padding}" Background="Transparent">
						<Rectangle HorizontalAlignment="Center" Width="1" Fill="{TemplateBinding Background}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource PrimaryMouseOverSolidColorBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultGridViewColumnHeader" TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="FontWeight" Value="ExtraBlack" />
		<Setter Property="Background" Value="{DynamicResource BackgroundSolidColorBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource BaseSolidColorBrush}" />
		<Setter Property="BorderThickness" Value="0,0,0,1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal" />
								<VisualState x:Name="MouseOver" />
								<VisualState x:Name="Pressed" />
								<VisualState x:Name="Disabled" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="HeaderBorder" Background="{TemplateBinding Background}" Padding="10" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
							<ContentPresenter x:Name="HeaderContent" Margin="0,0,0,1" TextElement.FontWeight="{TemplateBinding FontWeight}" RecognizesAccessKey="True" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
						<Thumb x:Name="PART_HeaderGripper" HorizontalAlignment="Right" Margin="0,0,-9,0" Style="{StaticResource GridViewColumnHeaderGripper}" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultListView" TargetType="{x:Type ListView}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListView}">
					<Border Name="Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource BaseSolidColorBrush}">
						<ScrollViewer Style="{DynamicResource&#xD;&#xA;                        {x:Static GridView.GridViewScrollViewerStyleKey}}">
							<ItemsPresenter />
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsGrouping" Value="True">
							<Setter Property="ScrollViewer.CanContentScroll" Value="False" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultListViewItem" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="MinHeight" Value="48" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="{DynamicResource BaseSolidColorBrush}" />
		<Setter Property="BorderThickness" Value="0,0,0,1" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListViewItem}">
					<Border x:Name="Border" Padding="2" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="Background" Value="{DynamicResource BaseMoveColorSolidColorBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource DefaultListViewItem}" />
	<Style TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource DefaultGridViewColumnHeader}" />
	<Style TargetType="{x:Type ListView}" BasedOn="{StaticResource DefaultListView}" />
	<Style x:Key="DefaultProgressBar" TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Foreground">
			<Setter.Value>
				<DrawingBrush Viewport="0,0,20,6" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
					<DrawingBrush.Transform>
						<TransformGroup>
							<RotateTransform Angle="20" />
							<TranslateTransform X="0" />
						</TransformGroup>
					</DrawingBrush.Transform>
					<DrawingBrush.Drawing>
						<GeometryDrawing>
							<GeometryDrawing.Brush>
								<LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
									<GradientStop Color="{DynamicResource PrimaryNormalColor}" Offset="0" />
									<GradientStop Color="{DynamicResource PrimaryNormalColor}" Offset="0.5" />
									<GradientStop Color="Transparent" Offset="0.5" />
									<GradientStop Color="Transparent" Offset="1" />
								</LinearGradientBrush>
							</GeometryDrawing.Brush>
							<GeometryDrawing.Geometry>
								<RectangleGeometry Rect="0,0,20,6" />
							</GeometryDrawing.Geometry>
						</GeometryDrawing>
					</DrawingBrush.Drawing>
				</DrawingBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="Height" Value="6" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="LoadedStoryboard" RepeatBehavior="Forever">
							<DoubleAnimation Storyboard.TargetProperty="(Border.Background).(Brush.Transform).(TransformGroup.Children)[1].(TranslateTransform.X)" Storyboard.TargetName="Indicator" From="0" To="21" Duration="00:00:0.45" />
						</Storyboard>
						<Storyboard x:Key="IsIndeterminate" RepeatBehavior="Forever">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" Storyboard.TargetName="ScaleXBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
								<EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.3" />
								<EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.3" />
							</DoubleAnimationUsingKeyFrames>
							<PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="ScaleXBorder">
								<EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" EasingFunction="{StaticResource SineEaseOut}" />
								<EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
								<EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" EasingFunction="{StaticResource SineEaseOut}" />
							</PointAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Border x:Name="PART_Border" Background="{DynamicResource BaseSolidColorBrush}" CornerRadius="{Binding Path=(helpers:ElementHelper.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}">
						<Grid ClipToBounds="True">
							<Border x:Name="PART_Track" />
							<Decorator x:Name="PART_Indicator" HorizontalAlignment="Left">
								<Border x:Name="Indicator" CornerRadius="{Binding Path=(helpers:ElementHelper.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" Background="{TemplateBinding Foreground}" />
							</Decorator>
							<Rectangle x:Name="ScaleXBorder" Visibility="Collapsed" Fill="{DynamicResource PrimaryNormalSolidColorBrush}">
								<Rectangle.RenderTransform>
									<ScaleTransform />
								</Rectangle.RenderTransform>
							</Rectangle>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Vertical">
							<Setter Property="Height" Value="{x:Static sys:Double.NaN}" />
							<Setter Property="LayoutTransform" TargetName="PART_Border">
								<Setter.Value>
									<RotateTransform Angle="-90" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsIndeterminate" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource IsIndeterminate}" />
							</Trigger.EnterActions>
							<Setter Property="Visibility" TargetName="PART_Indicator" Value="Collapsed" />
							<Setter Property="Visibility" TargetName="ScaleXBorder" Value="Visible" />
							<Setter Property="CornerRadius" TargetName="PART_Border" Value="0" />
							<Trigger.ExitActions>
								<StopStoryboard BeginStoryboardName="LoadedBeginStoryboard" />
							</Trigger.ExitActions>
						</Trigger>
						<EventTrigger RoutedEvent="FrameworkElement.Loaded" SourceName="Indicator">
							<BeginStoryboard x:Name="LoadedBeginStoryboard" Storyboard="{StaticResource LoadedStoryboard}" />
						</EventTrigger>
						<EventTrigger RoutedEvent="FrameworkElement.Unloaded" SourceName="Indicator">
							<StopStoryboard BeginStoryboardName="LoadedBeginStoryboard" />
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource DefaultProgressBar}" />
	<Style x:Key="DefaultTreeView" TargetType="{x:Type TreeView}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TreeView">
					<Border Name="Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource BaseSolidColorBrush}" Background="{DynamicResource BackgroundSolidColorBrush}">
						<ScrollViewer Focusable="False" CanContentScroll="False" Padding="4">
							<ItemsPresenter />
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Grid Width="15" Height="13" Background="Transparent">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimation Duration="00:00:.2" To="90" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="Expanded" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked">
									<Storyboard>
										<DoubleAnimation Duration="00:00:.2" To="0" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="Expanded" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Indeterminate" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Path x:Name="Expanded" Stretch="Fill" Height="10" Width="6" Data="{StaticResource PathNext}" RenderTransformOrigin=".5,.5">
							<Path.Fill>
								<SolidColorBrush Color="{DynamicResource PrimaryTextColor}" />
							</Path.Fill>
							<Path.RenderTransform>
								<RotateTransform />
							</Path.RenderTransform>
						</Path>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DefaultTreeViewItem" TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Padding" Value="10" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="ExpansionStates">
								<VisualState x:Name="Expanded">
									<Storyboard>
										<DoubleAnimation Duration="00:00:.2" To="1" Storyboard.TargetProperty="(Border.RenderTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="PART_ItemsHost" />
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Collapsed" />
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition />
						</Grid.RowDefinitions>
						<Border x:Name="PART_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
							<DockPanel LastChildFill="True">
								<ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}" />
								<ContentPresenter VerticalAlignment="Center" x:Name="PART_Header" ContentSource="Header" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</DockPanel>
						</Border>
						<Border Grid.Row="1" RenderTransformOrigin=".5,0" x:Name="PART_ItemsHost">
							<Border.RenderTransform>
								<ScaleTransform ScaleY="0" />
							</Border.RenderTransform>
							<ItemsPresenter x:Name="ItemsHost" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" SourceName="PART_Border" Value="True">
							<Setter Property="Background" TargetName="PART_Border" Value="{DynamicResource BaseMoveColorSolidColorBrush}" />
						</Trigger>
						<Trigger Property="IsExpanded" Value="False">
							<Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed" />
						</Trigger>
						<Trigger Property="HasItems" Value="False">
							<Setter Property="Visibility" TargetName="Expander" Value="Hidden" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="Background" TargetName="PART_Border" Value="{DynamicResource BaseSolidColorBrush}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True" />
								<Condition Property="IsSelectionActive" Value="False" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="PART_Border" Value="{DynamicResource BackgroundSolidColorBrush}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type TreeView}" BasedOn="{StaticResource DefaultTreeView}" />
	<Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource DefaultTreeViewItem}" />
	<Style TargetType="{x:Type controls:WPFMessageBox}">
		<Setter Property="Foreground" Value="{DynamicResource PrimaryTextSolidColorBrush}" />
		<Setter Property="Background" Value="{DynamicResource BackgroundSolidColorBrush}" />
		<Setter Property="BorderBrush" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
		<Setter Property="SizeToContent" Value="WidthAndHeight" />
		<Setter Property="ResizeMode" Value="NoResize" />
		<Setter Property="ShowInTaskbar" Value="False" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="TextOptions.TextFormattingMode" Value="Display" />
		<Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
		<Setter Property="WindowStyle" Value="None" />
		<Setter Property="FontFamily" Value="{DynamicResource NormalFontFamily}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:WPFMessageBox}">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition />
								<RowDefinition />
								<RowDefinition />
							</Grid.RowDefinitions>
							<Grid Grid.Row="0">
								<DockPanel Margin="20,0,0,0">
									<TextBlock x:Name="PART_Title" HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="{DynamicResource TitleFontSize}" Foreground="{DynamicResource PrimaryTextSolidColorBrush}" />
									<Button Name="PART_CloseButton" Margin="0,6" ToolTip="Close" HorizontalAlignment="Right" IsTabStop="False" Style="{DynamicResource WindowButtonStyle}">
										<Path Width="10" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{DynamicResource PathMetroWindowClose}" Fill="{DynamicResource PrimaryTextSolidColorBrush}" Stretch="Fill" />
									</Button>
								</DockPanel>
							</Grid>
							<Grid Grid.Row="1" Margin="20">
								<DockPanel>
									<Path x:Name="PART_Path" Data="{DynamicResource PathInformation}" Fill="{DynamicResource PrimaryNormalSolidColorBrush}" Height="25" Width="25" Stretch="Fill" />
									<TextBox x:Name="PART_Message" TextWrapping="Wrap" MaxWidth="500" Width="Auto" VerticalAlignment="Center" FontSize="{DynamicResource NormalFontSize}" Padding="10,0" IsReadOnly="True" BorderThickness="0" Foreground="{DynamicResource RegularTextSolidColorBrush}" />
								</DockPanel>
							</Grid>
							<Grid Grid.Row="2" Margin="140,20,10,10">
								<StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
									<Button x:Name="PART_ButtonCancel" Content="取消" Visibility="Collapsed" />
									<Button x:Name="PART_ButtonOK" Style="{DynamicResource PrimaryButton}" Margin="10,0,0,0" Content="确认" />
								</StackPanel>
							</Grid>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type controls:WPFLoading}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="Background" Value="{x:Null}" />
		<Setter Property="FontFamily" Value="{DynamicResource NormalFontFamily}" />
		<Setter Property="BorderBrush" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
		<Setter Property="Width" Value="40" />
		<Setter Property="Height" Value="40" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:WPFLoading}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="StarStoryboard" RepeatBehavior="Forever">
							<DoubleAnimation Duration="0:0:1.5" To="360" Storyboard.TargetName="PART_Ellipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" />
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid Background="{TemplateBinding Background}">
						<Ellipse Stroke="{TemplateBinding BorderBrush}" x:Name="PART_Ellipse" StrokeThickness="2" StrokeDashArray="{TemplateBinding StrokeArray}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" RenderTransformOrigin=".5,.5">
							<Ellipse.RenderTransform>
								<RotateTransform Angle="-90" />
							</Ellipse.RenderTransform>
						</Ellipse>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsAnimation" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard x:Name="StarBeginStoryboard" Storyboard="{StaticResource StarStoryboard}" />
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<StopStoryboard BeginStoryboardName="StarBeginStoryboard" />
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type controls:ThemeControl}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:ThemeControl}">
					<ItemsControl ItemsSource="{Binding ItemsSource,RelativeSource={RelativeSource AncestorType=controls:ThemeControl}}">
						<ItemsControl.ItemTemplate>
							<DataTemplate>
								<RadioButton Height="40" Width="40" Margin="4,0" Cursor="Hand" IsChecked="{Binding IsChecked}">
									<RadioButton.Style>
										<Style TargetType="{x:Type RadioButton}">
											<Setter Property="Template">
												<Setter.Value>
													<ControlTemplate TargetType="{x:Type RadioButton}">
														<Border x:Name="PART_Border" Padding="2" BorderThickness="0" BorderBrush="{Binding Color}">
															<Grid Background="{x:Null}">
																<Rectangle x:Name="PART_Rectangle" Fill="{Binding Color}" />
																<Path Data="{StaticResource PathCheckMark}" Stretch="Fill" Fill="{DynamicResource BackgroundSolidColorBrush}" VerticalAlignment="Bottom" HorizontalAlignment="Right" Height="10" Width="12" Margin="0,0,4,4" Visibility="{Binding IsChecked,Converter={StaticResource bool2VisibilityConverter}}" />
															</Grid>
														</Border>
														<ControlTemplate.Triggers>
															<Trigger Property="IsMouseOver" Value="True">
																<Setter Property="Opacity" Value=".8" TargetName="PART_Rectangle" />
																<Setter Property="BorderThickness" Value="1" TargetName="PART_Border" />
															</Trigger>
															<Trigger Property="IsChecked" Value="True">
																<Setter Property="BorderThickness" Value="1" TargetName="PART_Border" />
															</Trigger>
														</ControlTemplate.Triggers>
													</ControlTemplate>
												</Setter.Value>
											</Setter>
										</Style>
									</RadioButton.Style>
								</RadioButton>
							</DataTemplate>
						</ItemsControl.ItemTemplate>
						<ItemsControl.ItemsPanel>
							<ItemsPanelTemplate>
								<WrapPanel />
							</ItemsPanelTemplate>
						</ItemsControl.ItemsPanel>
					</ItemsControl>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="DatePickerCalendarStyle" TargetType="{x:Type Calendar}" BasedOn="{StaticResource {x:Type Calendar}}" />
	<Style x:Key="DefaultDatePicker" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource ControlBasicStyle}">
		<Setter Property="IsTodayHighlighted" Value="True" />
		<Setter Property="SelectedDateFormat" Value="Short" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="MinWidth" Value="140" />
		<Setter Property="MinHeight" Value="{StaticResource MinHeight}" />
		<Setter Property="Cursor" Value="Hand" />
		<Setter Property="CalendarStyle" Value="{DynamicResource DatePickerCalendarStyle}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type DatePicker}">
					<Border BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="{Binding Path=(helpers:ElementHelper.CornerRadius),RelativeSource={RelativeSource TemplatedParent}}" x:Name="PART_Border" BorderBrush="{DynamicResource BaseSolidColorBrush}" Background="{DynamicResource BackgroundSolidColorBrush}">
						<Grid x:Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<Button x:Name="PART_Button" Foreground="{TemplateBinding Foreground}" Focusable="False" Margin="3,0,3,0" Style="{StaticResource DropDownButtonStyle}" VerticalAlignment="Top" />
							<DatePickerTextBox x:Name="PART_TextBox" Grid.Column="1" Foreground="{TemplateBinding Foreground}" Focusable="True" Width="Auto" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="34,2,2,2" Background="Transparent" />
							<Popup x:Name="PART_Popup" MinWidth="{TemplateBinding FrameworkElement.ActualWidth}" AllowsTransparency="True" Focusable="False" HorizontalOffset="-50" Placement="Bottom" StaysOpen="False" VerticalOffset="10" />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="BorderBrush" TargetName="PART_Border" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
						</Trigger>
						<Trigger Property="IsDropDownOpen" Value="True">
							<Setter Property="BorderBrush" TargetName="PART_Border" Value="{DynamicResource PrimaryNormalSolidColorBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type DatePicker}" BasedOn="{StaticResource DefaultDatePicker}" />
</ResourceDictionary>